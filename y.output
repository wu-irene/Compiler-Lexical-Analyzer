Terminals unused in grammar

   FUNCTION
   ARRAY
   OF
   THEN
   ENDIF
   DO
   CONTINUE
   BREAK
   READ
   NOT
   TRUE
   FALSE
   MOD
   COLON
   EQUAL
   OUTPUT


State 5 conflicts: 8 shift/reduce, 10 reduce/reduce
State 14 conflicts: 8 shift/reduce, 12 reduce/reduce
State 19 conflicts: 9 shift/reduce, 12 reduce/reduce
State 29 conflicts: 8 shift/reduce, 11 reduce/reduce
State 30 conflicts: 8 shift/reduce, 11 reduce/reduce
State 33 conflicts: 8 shift/reduce, 10 reduce/reduce
State 39 conflicts: 8 shift/reduce, 11 reduce/reduce
State 40 conflicts: 8 shift/reduce, 12 reduce/reduce
State 68 conflicts: 1 shift/reduce
State 78 conflicts: 8 shift/reduce, 11 reduce/reduce
State 110 conflicts: 8 shift/reduce, 10 reduce/reduce
State 111 conflicts: 8 shift/reduce, 10 reduce/reduce
State 119 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: functionstart statements functionend
    4          | functionstart statements functionend functions

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY
    6              | VOID IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    7 functionend: END_BODY

    8 arguments: argument
    9          | argument COMMA arguments

   10 argument: %empty
   11         | INTEGER IDENT
   12         | IDENT
   13         | statements

   14 variable: IDENT
   15         | NUMBER

   16 statements: %empty
   17           | statement SEMICOLON
   18           | statement statements

   19 statement: %empty
   20          | ifElseState
   21          | whileLoop
   22          | assignment
   23          | definition
   24          | return
   25          | functionCall
   26          | math
   27          | write
   28          | arrayAccess

   29 write: WRITE INPUT variable SEMICOLON

   30 math: variable MINUS variable
   31     | variable PLUS variable
   32     | variable MULT variable
   33     | variable DIV variable

   34 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

   36 functionCall: IDENT L_PAREN arguments R_PAREN SEMICOLON

   37 return: RETURN NUMBER SEMICOLON
   38       | RETURN IDENT SEMICOLON
   39       | RETURN statements

   40 definition: INTEGER IDENT SEMICOLON

   41 ifElseState: %empty
   42            | IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState
   43            | ELSE BEGIN_BODY statements END_BODY

   44 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

   45 assignment: IDENT ASSIGN variable SEMICOLON
   46           | IDENT ASSIGN arrayUnzip
   47           | IDENT ASSIGN math SEMICOLON
   48           | IDENT ASSIGN statement

   49 condition: %empty
   50          | IDENT EQ IDENT
   51          | IDENT NEQ IDENT
   52          | IDENT LT IDENT
   53          | IDENT GT IDENT
   54          | IDENT LTE IDENT
   55          | IDENT GTE IDENT
   56          | IDENT EQ NUMBER
   57          | IDENT NEQ NUMBER
   58          | IDENT LT NUMBER
   59          | IDENT GT NUMBER
   60          | IDENT LTE NUMBER
   61          | IDENT GTE NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 11 40
FUNCTION (259)
BEGIN_BODY (260) 5 6 42 43 44
END_BODY (261) 7 42 43 44
ARRAY (262)
OF (263)
IF (264) 42
THEN (265)
ENDIF (266)
ELSE (267) 43
WHILE (268) 44
DO (269)
CONTINUE (270)
BREAK (271)
READ (272)
WRITE (273) 29
NOT (274)
TRUE (275)
FALSE (276)
RETURN (277) 37 38 39
MOD (278)
EQ (279) 50 56
NEQ (280) 51 57
LT (281) 52 58
GT (282) 53 59
LTE (283) 54 60
GTE (284) 55 61
SEMICOLON (285) 17 29 34 35 36 37 38 40 45 47
COLON (286)
COMMA (287) 9
L_SQUARE_BRACKET (288) 34 35
R_SQUARE_BRACKET (289) 34 35
EQUAL (290)
NUMBER (291) 15 37 56 57 58 59 60 61
PLUS (292) 31
MINUS (293) 30
MULT (294) 32
DIV (295) 33
L_PAREN (296) 5 6 36 42 44
R_PAREN (297) 5 6 36 42 44
ASSIGN (298) 35 45 46 47 48
INPUT (299) 29
OUTPUT (300)
IDENT (301) 5 6 11 12 14 36 38 40 45 46 47 48 50 51 52 53 54 55 56
    57 58 59 60 61
VOID (302) 6


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
prog_start (49)
    on left: 1 2, on right: 0
functions (50)
    on left: 3 4, on right: 2 4
functionstart (51)
    on left: 5 6, on right: 3 4
functionend (52)
    on left: 7, on right: 3 4
arguments (53)
    on left: 8 9, on right: 5 6 9 36
argument (54)
    on left: 10 11 12 13, on right: 8 9
variable (55)
    on left: 14 15, on right: 29 30 31 32 33 34 35 45
statements (56)
    on left: 16 17 18, on right: 3 4 13 18 39 42 43 44
statement (57)
    on left: 19 20 21 22 23 24 25 26 27 28, on right: 17 18 48
write (58)
    on left: 29, on right: 27
math (59)
    on left: 30 31 32 33, on right: 26 47
arrayUnzip (60)
    on left: 34, on right: 46
arrayAccess (61)
    on left: 35, on right: 28
functionCall (62)
    on left: 36, on right: 25
return (63)
    on left: 37 38 39, on right: 24
definition (64)
    on left: 40, on right: 23
ifElseState (65)
    on left: 41 42 43, on right: 20 42
whileLoop (66)
    on left: 44, on right: 21
assignment (67)
    on left: 45 46 47 48, on right: 22
condition (68)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61, on right: 42 44


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1
    VOID     shift, and go to state 2

    $default  reduce using rule 1 (prog_start)

    prog_start     go to state 3
    functions      go to state 4
    functionstart  go to state 5


State 1

    5 functionstart: INTEGER . IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 6


State 2

    6 functionstart: VOID . IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 7


State 3

    0 $accept: prog_start . $end

    $end  shift, and go to state 8


State 4

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 5

    3 functions: functionstart . statements functionend
    4          | functionstart . statements functionend functions

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 18
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 6

    5 functionstart: INTEGER IDENT . L_PAREN arguments R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 29


State 7

    6 functionstart: VOID IDENT . L_PAREN arguments R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 30


State 8

    0 $accept: prog_start $end .

    $default  accept


State 9

   40 definition: INTEGER . IDENT SEMICOLON

    IDENT  shift, and go to state 31


State 10

   42 ifElseState: IF . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    L_PAREN  shift, and go to state 32


State 11

   43 ifElseState: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 33


State 12

   44 whileLoop: WHILE . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

    L_PAREN  shift, and go to state 34


State 13

   29 write: WRITE . INPUT variable SEMICOLON

    INPUT  shift, and go to state 35


State 14

   37 return: RETURN . NUMBER SEMICOLON
   38       | RETURN . IDENT SEMICOLON
   39       | RETURN . statements

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 36
    IDENT    shift, and go to state 37

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 16 (statements)
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 38
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 15

   15 variable: NUMBER .

    $default  reduce using rule 15 (variable)


State 16

   14 variable: IDENT .
   36 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   45 assignment: IDENT . ASSIGN variable SEMICOLON
   46           | IDENT . ASSIGN arrayUnzip
   47           | IDENT . ASSIGN math SEMICOLON
   48           | IDENT . ASSIGN statement

    L_PAREN  shift, and go to state 39
    ASSIGN   shift, and go to state 40

    $default  reduce using rule 14 (variable)


State 17

   30 math: variable . MINUS variable
   31     | variable . PLUS variable
   32     | variable . MULT variable
   33     | variable . DIV variable
   35 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

    L_SQUARE_BRACKET  shift, and go to state 41
    PLUS              shift, and go to state 42
    MINUS             shift, and go to state 43
    MULT              shift, and go to state 44
    DIV               shift, and go to state 45


State 18

    3 functions: functionstart statements . functionend
    4          | functionstart statements . functionend functions

    END_BODY  shift, and go to state 46

    functionend  go to state 47


State 19

   17 statements: statement . SEMICOLON
   18           | statement . statements

    INTEGER    shift, and go to state 9
    IF         shift, and go to state 10
    ELSE       shift, and go to state 11
    WHILE      shift, and go to state 12
    WRITE      shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 48
    NUMBER     shift, and go to state 15
    IDENT      shift, and go to state 16

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  [reduce using rule 16 (statements)]
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 49
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 20

   27 statement: write .

    $default  reduce using rule 27 (statement)


State 21

   26 statement: math .

    $default  reduce using rule 26 (statement)


State 22

   28 statement: arrayAccess .

    $default  reduce using rule 28 (statement)


State 23

   25 statement: functionCall .

    $default  reduce using rule 25 (statement)


State 24

   24 statement: return .

    $default  reduce using rule 24 (statement)


State 25

   23 statement: definition .

    $default  reduce using rule 23 (statement)


State 26

   20 statement: ifElseState .

    $default  reduce using rule 20 (statement)


State 27

   21 statement: whileLoop .

    $default  reduce using rule 21 (statement)


State 28

   22 statement: assignment .

    $default  reduce using rule 22 (statement)


State 29

    5 functionstart: INTEGER IDENT L_PAREN . arguments R_PAREN BEGIN_BODY

    INTEGER  shift, and go to state 50
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 51

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 10 (argument)

    arguments     go to state 52
    argument      go to state 53
    variable      go to state 17
    statements    go to state 54
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 30

    6 functionstart: VOID IDENT L_PAREN . arguments R_PAREN BEGIN_BODY

    INTEGER  shift, and go to state 50
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 51

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 10 (argument)

    arguments     go to state 55
    argument      go to state 53
    variable      go to state 17
    statements    go to state 54
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 31

   40 definition: INTEGER IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 56


State 32

   42 ifElseState: IF L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    IDENT  shift, and go to state 57

    $default  reduce using rule 49 (condition)

    condition  go to state 58


State 33

   43 ifElseState: ELSE BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 59
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 34

   44 whileLoop: WHILE L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 57

    $default  reduce using rule 49 (condition)

    condition  go to state 60


State 35

   29 write: WRITE INPUT . variable SEMICOLON

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 62


State 36

   15 variable: NUMBER .
   37 return: RETURN NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 63

    $default  reduce using rule 15 (variable)


State 37

   14 variable: IDENT .
   36 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   38 return: RETURN IDENT . SEMICOLON
   45 assignment: IDENT . ASSIGN variable SEMICOLON
   46           | IDENT . ASSIGN arrayUnzip
   47           | IDENT . ASSIGN math SEMICOLON
   48           | IDENT . ASSIGN statement

    SEMICOLON  shift, and go to state 64
    L_PAREN    shift, and go to state 39
    ASSIGN     shift, and go to state 40

    $default  reduce using rule 14 (variable)


State 38

   39 return: RETURN statements .

    $default  reduce using rule 39 (return)


State 39

   36 functionCall: IDENT L_PAREN . arguments R_PAREN SEMICOLON

    INTEGER  shift, and go to state 50
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 51

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 10 (argument)

    arguments     go to state 65
    argument      go to state 53
    variable      go to state 17
    statements    go to state 54
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 40

   45 assignment: IDENT ASSIGN . variable SEMICOLON
   46           | IDENT ASSIGN . arrayUnzip
   47           | IDENT ASSIGN . math SEMICOLON
   48           | IDENT ASSIGN . statement

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 19 (statement)
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 19 (statement)
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 19 (statement)
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 66
    statement     go to state 67
    write         go to state 20
    math          go to state 68
    arrayUnzip    go to state 69
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 41

   35 arrayAccess: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 70


State 42

   31 math: variable PLUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 71


State 43

   30 math: variable MINUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 72


State 44

   32 math: variable MULT . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 73


State 45

   33 math: variable DIV . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 74


State 46

    7 functionend: END_BODY .

    $default  reduce using rule 7 (functionend)


State 47

    3 functions: functionstart statements functionend .
    4          | functionstart statements functionend . functions

    INTEGER  shift, and go to state 1
    VOID     shift, and go to state 2

    $default  reduce using rule 3 (functions)

    functions      go to state 75
    functionstart  go to state 5


State 48

   17 statements: statement SEMICOLON .

    $default  reduce using rule 17 (statements)


State 49

   18 statements: statement statements .

    $default  reduce using rule 18 (statements)


State 50

   11 argument: INTEGER . IDENT
   40 definition: INTEGER . IDENT SEMICOLON

    IDENT  shift, and go to state 76


State 51

   12 argument: IDENT .
   14 variable: IDENT .
   36 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   45 assignment: IDENT . ASSIGN variable SEMICOLON
   46           | IDENT . ASSIGN arrayUnzip
   47           | IDENT . ASSIGN math SEMICOLON
   48           | IDENT . ASSIGN statement

    L_PAREN  shift, and go to state 39
    ASSIGN   shift, and go to state 40

    COMMA     reduce using rule 12 (argument)
    R_PAREN   reduce using rule 12 (argument)
    $default  reduce using rule 14 (variable)


State 52

    5 functionstart: INTEGER IDENT L_PAREN arguments . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 77


State 53

    8 arguments: argument .
    9          | argument . COMMA arguments

    COMMA  shift, and go to state 78

    $default  reduce using rule 8 (arguments)


State 54

   13 argument: statements .

    $default  reduce using rule 13 (argument)


State 55

    6 functionstart: VOID IDENT L_PAREN arguments . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 79


State 56

   40 definition: INTEGER IDENT SEMICOLON .

    $default  reduce using rule 40 (definition)


State 57

   50 condition: IDENT . EQ IDENT
   51          | IDENT . NEQ IDENT
   52          | IDENT . LT IDENT
   53          | IDENT . GT IDENT
   54          | IDENT . LTE IDENT
   55          | IDENT . GTE IDENT
   56          | IDENT . EQ NUMBER
   57          | IDENT . NEQ NUMBER
   58          | IDENT . LT NUMBER
   59          | IDENT . GT NUMBER
   60          | IDENT . LTE NUMBER
   61          | IDENT . GTE NUMBER

    EQ   shift, and go to state 80
    NEQ  shift, and go to state 81
    LT   shift, and go to state 82
    GT   shift, and go to state 83
    LTE  shift, and go to state 84
    GTE  shift, and go to state 85


State 58

   42 ifElseState: IF L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY ifElseState

    R_PAREN  shift, and go to state 86


State 59

   43 ifElseState: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 87


State 60

   44 whileLoop: WHILE L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY

    R_PAREN  shift, and go to state 88


State 61

   14 variable: IDENT .

    $default  reduce using rule 14 (variable)


State 62

   29 write: WRITE INPUT variable . SEMICOLON

    SEMICOLON  shift, and go to state 89


State 63

   37 return: RETURN NUMBER SEMICOLON .

    $default  reduce using rule 37 (return)


State 64

   38 return: RETURN IDENT SEMICOLON .

    $default  reduce using rule 38 (return)


State 65

   36 functionCall: IDENT L_PAREN arguments . R_PAREN SEMICOLON

    R_PAREN  shift, and go to state 90


State 66

   30 math: variable . MINUS variable
   31     | variable . PLUS variable
   32     | variable . MULT variable
   33     | variable . DIV variable
   34 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON
   35 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   45 assignment: IDENT ASSIGN variable . SEMICOLON

    SEMICOLON         shift, and go to state 91
    L_SQUARE_BRACKET  shift, and go to state 92
    PLUS              shift, and go to state 42
    MINUS             shift, and go to state 43
    MULT              shift, and go to state 44
    DIV               shift, and go to state 45


State 67

   48 assignment: IDENT ASSIGN statement .

    $default  reduce using rule 48 (assignment)


State 68

   26 statement: math .
   47 assignment: IDENT ASSIGN math . SEMICOLON

    SEMICOLON  shift, and go to state 93

    SEMICOLON  [reduce using rule 26 (statement)]
    $default   reduce using rule 26 (statement)


State 69

   46 assignment: IDENT ASSIGN arrayUnzip .

    $default  reduce using rule 46 (assignment)


State 70

   35 arrayAccess: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN variable SEMICOLON

    R_SQUARE_BRACKET  shift, and go to state 94


State 71

   31 math: variable PLUS variable .

    $default  reduce using rule 31 (math)


State 72

   30 math: variable MINUS variable .

    $default  reduce using rule 30 (math)


State 73

   32 math: variable MULT variable .

    $default  reduce using rule 32 (math)


State 74

   33 math: variable DIV variable .

    $default  reduce using rule 33 (math)


State 75

    4 functions: functionstart statements functionend functions .

    $default  reduce using rule 4 (functions)


State 76

   11 argument: INTEGER IDENT .
   40 definition: INTEGER IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 56

    $default  reduce using rule 11 (argument)


State 77

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 95


State 78

    9 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 50
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 51

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 10 (argument)

    arguments     go to state 96
    argument      go to state 53
    variable      go to state 17
    statements    go to state 54
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 79

    6 functionstart: VOID IDENT L_PAREN arguments R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 97


State 80

   50 condition: IDENT EQ . IDENT
   56          | IDENT EQ . NUMBER

    NUMBER  shift, and go to state 98
    IDENT   shift, and go to state 99


State 81

   51 condition: IDENT NEQ . IDENT
   57          | IDENT NEQ . NUMBER

    NUMBER  shift, and go to state 100
    IDENT   shift, and go to state 101


State 82

   52 condition: IDENT LT . IDENT
   58          | IDENT LT . NUMBER

    NUMBER  shift, and go to state 102
    IDENT   shift, and go to state 103


State 83

   53 condition: IDENT GT . IDENT
   59          | IDENT GT . NUMBER

    NUMBER  shift, and go to state 104
    IDENT   shift, and go to state 105


State 84

   54 condition: IDENT LTE . IDENT
   60          | IDENT LTE . NUMBER

    NUMBER  shift, and go to state 106
    IDENT   shift, and go to state 107


State 85

   55 condition: IDENT GTE . IDENT
   61          | IDENT GTE . NUMBER

    NUMBER  shift, and go to state 108
    IDENT   shift, and go to state 109


State 86

   42 ifElseState: IF L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY ifElseState

    BEGIN_BODY  shift, and go to state 110


State 87

   43 ifElseState: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 43 (ifElseState)


State 88

   44 whileLoop: WHILE L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 111


State 89

   29 write: WRITE INPUT variable SEMICOLON .

    $default  reduce using rule 29 (write)


State 90

   36 functionCall: IDENT L_PAREN arguments R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 112


State 91

   45 assignment: IDENT ASSIGN variable SEMICOLON .

    $default  reduce using rule 45 (assignment)


State 92

   34 arrayUnzip: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET SEMICOLON
   35 arrayAccess: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 113


State 93

   47 assignment: IDENT ASSIGN math SEMICOLON .

    $default  reduce using rule 47 (assignment)


State 94

   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN variable SEMICOLON

    ASSIGN  shift, and go to state 114


State 95

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY .

    $default  reduce using rule 5 (functionstart)


State 96

    9 arguments: argument COMMA arguments .

    $default  reduce using rule 9 (arguments)


State 97

    6 functionstart: VOID IDENT L_PAREN arguments R_PAREN BEGIN_BODY .

    $default  reduce using rule 6 (functionstart)


State 98

   56 condition: IDENT EQ NUMBER .

    $default  reduce using rule 56 (condition)


State 99

   50 condition: IDENT EQ IDENT .

    $default  reduce using rule 50 (condition)


State 100

   57 condition: IDENT NEQ NUMBER .

    $default  reduce using rule 57 (condition)


State 101

   51 condition: IDENT NEQ IDENT .

    $default  reduce using rule 51 (condition)


State 102

   58 condition: IDENT LT NUMBER .

    $default  reduce using rule 58 (condition)


State 103

   52 condition: IDENT LT IDENT .

    $default  reduce using rule 52 (condition)


State 104

   59 condition: IDENT GT NUMBER .

    $default  reduce using rule 59 (condition)


State 105

   53 condition: IDENT GT IDENT .

    $default  reduce using rule 53 (condition)


State 106

   60 condition: IDENT LTE NUMBER .

    $default  reduce using rule 60 (condition)


State 107

   54 condition: IDENT LTE IDENT .

    $default  reduce using rule 54 (condition)


State 108

   61 condition: IDENT GTE NUMBER .

    $default  reduce using rule 61 (condition)


State 109

   55 condition: IDENT GTE IDENT .

    $default  reduce using rule 55 (condition)


State 110

   42 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY ifElseState

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 115
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 111

   44 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 41 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 41 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 41 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 41 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 41 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 41 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 41 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 41 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 41 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 41 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 116
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    functionCall  go to state 23
    return        go to state 24
    definition    go to state 25
    ifElseState   go to state 26
    whileLoop     go to state 27
    assignment    go to state 28


State 112

   36 functionCall: IDENT L_PAREN arguments R_PAREN SEMICOLON .

    $default  reduce using rule 36 (functionCall)


State 113

   34 arrayUnzip: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET SEMICOLON
   35 arrayAccess: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN variable SEMICOLON

    R_SQUARE_BRACKET  shift, and go to state 117


State 114

   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . variable SEMICOLON

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 61

    variable  go to state 118


State 115

   42 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY ifElseState

    END_BODY  shift, and go to state 119


State 116

   44 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 120


State 117

   34 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . SEMICOLON
   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN variable SEMICOLON

    SEMICOLON  shift, and go to state 121
    ASSIGN     shift, and go to state 114


State 118

   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable . SEMICOLON

    SEMICOLON  shift, and go to state 122


State 119

   42 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY . ifElseState

    IF    shift, and go to state 10
    ELSE  shift, and go to state 11

    IF        [reduce using rule 41 (ifElseState)]
    ELSE      [reduce using rule 41 (ifElseState)]
    $default  reduce using rule 41 (ifElseState)

    ifElseState  go to state 123


State 120

   44 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY .

    $default  reduce using rule 44 (whileLoop)


State 121

   34 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON .

    $default  reduce using rule 34 (arrayUnzip)


State 122

   35 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON .

    $default  reduce using rule 35 (arrayAccess)


State 123

   42 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState .

    $default  reduce using rule 42 (ifElseState)
