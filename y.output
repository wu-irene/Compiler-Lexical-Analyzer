Terminals unused in grammar

   FUNCTION
   ARRAY
   OF
   THEN
   ENDIF
   DO
   CONTINUE
   BREAK
   READ
   WRITE
   NOT
   TRUE
   FALSE
   RETURN
   MOD
   COLON
   L_SQUARE_BRACKET
   R_SQUARE_BRACKET
   EQUAL
   NUMBER
   PLUS
   MINUS
   MULT
   DIV
   ASSIGN


State 15 conflicts: 1 reduce/reduce
State 25 conflicts: 1 reduce/reduce
State 28 conflicts: 1 reduce/reduce
State 49 conflicts: 1 reduce/reduce
State 50 conflicts: 1 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY statements END_BODY

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENT

   10 statements: %empty
   11           | statement SEMICOLON statements

   12 statement: %empty
   13          | ifElseState
   14          | whileLoop

   15 ifElseState: %empty
   16            | IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState
   17            | ELSE BEGIN_BODY statements END_BODY

   18 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

   19 condition: %empty
   20          | IDENT EQ IDENT
   21          | IDENT NEQ IDENT
   22          | IDENT LT IDENT
   23          | IDENT GT IDENT
   24          | IDENT LTE IDENT
   25          | IDENT GTE IDENT


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 9
FUNCTION (259)
BEGIN_BODY (260) 5 16 17 18
END_BODY (261) 5 16 17 18
ARRAY (262)
OF (263)
IF (264) 16
THEN (265)
ENDIF (266)
ELSE (267) 17
WHILE (268) 18
DO (269)
CONTINUE (270)
BREAK (271)
READ (272)
WRITE (273)
NOT (274)
TRUE (275)
FALSE (276)
RETURN (277)
MOD (278)
EQ (279) 20
NEQ (280) 21
LT (281) 22
GT (282) 23
LTE (283) 24
GTE (284) 25
SEMICOLON (285) 11
COLON (286)
COMMA (287) 7
L_SQUARE_BRACKET (288)
R_SQUARE_BRACKET (289)
EQUAL (290)
NUMBER (291)
PLUS (292)
MINUS (293)
MULT (294)
DIV (295)
L_PAREN (296) 5 16 18
R_PAREN (297) 5 16 18
ASSIGN (298)
IDENT (299) 5 9 20 21 22 23 24 25


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
prog_start (46)
    on left: 1 2, on right: 0
functions (47)
    on left: 3 4, on right: 2 4
function (48)
    on left: 5, on right: 3 4
arguments (49)
    on left: 6 7, on right: 5 7
argument (50)
    on left: 8 9, on right: 6 7
statements (51)
    on left: 10 11, on right: 5 11 16 17 18
statement (52)
    on left: 12 13 14, on right: 11
ifElseState (53)
    on left: 15 16 17, on right: 13 16
whileLoop (54)
    on left: 18, on right: 14
condition (55)
    on left: 19 20 21 22 23 24 25, on right: 16 18


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: INTEGER . IDENT L_PAREN arguments R_PAREN BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: INTEGER IDENT . L_PAREN arguments R_PAREN BEGIN_BODY statements END_BODY

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: INTEGER IDENT L_PAREN . arguments R_PAREN BEGIN_BODY statements END_BODY

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 10
    argument   go to state 11


State 9

    9 argument: INTEGER . IDENT

    IDENT  shift, and go to state 12


State 10

    5 function: INTEGER IDENT L_PAREN arguments . R_PAREN BEGIN_BODY statements END_BODY

    R_PAREN  shift, and go to state 13


State 11

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 14

    $default  reduce using rule 6 (arguments)


State 12

    9 argument: INTEGER IDENT .

    $default  reduce using rule 9 (argument)


State 13

    5 function: INTEGER IDENT L_PAREN arguments R_PAREN . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 15


State 14

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 16
    argument   go to state 11


State 15

    5 function: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY . statements END_BODY

    IF     shift, and go to state 17
    ELSE   shift, and go to state 18
    WHILE  shift, and go to state 19

    SEMICOLON  reduce using rule 12 (statement)
    SEMICOLON  [reduce using rule 15 (ifElseState)]
    $default   reduce using rule 10 (statements)

    statements   go to state 20
    statement    go to state 21
    ifElseState  go to state 22
    whileLoop    go to state 23


State 16

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 17

   16 ifElseState: IF . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    L_PAREN  shift, and go to state 24


State 18

   17 ifElseState: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 25


State 19

   18 whileLoop: WHILE . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

    L_PAREN  shift, and go to state 26


State 20

    5 function: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 27


State 21

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 28


State 22

   13 statement: ifElseState .

    $default  reduce using rule 13 (statement)


State 23

   14 statement: whileLoop .

    $default  reduce using rule 14 (statement)


State 24

   16 ifElseState: IF L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    IDENT  shift, and go to state 29

    $default  reduce using rule 19 (condition)

    condition  go to state 30


State 25

   17 ifElseState: ELSE BEGIN_BODY . statements END_BODY

    IF     shift, and go to state 17
    ELSE   shift, and go to state 18
    WHILE  shift, and go to state 19

    SEMICOLON  reduce using rule 12 (statement)
    SEMICOLON  [reduce using rule 15 (ifElseState)]
    $default   reduce using rule 10 (statements)

    statements   go to state 31
    statement    go to state 21
    ifElseState  go to state 22
    whileLoop    go to state 23


State 26

   18 whileLoop: WHILE L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 29

    $default  reduce using rule 19 (condition)

    condition  go to state 32


State 27

    5 function: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY statements END_BODY .

    $default  reduce using rule 5 (function)


State 28

   11 statements: statement SEMICOLON . statements

    IF     shift, and go to state 17
    ELSE   shift, and go to state 18
    WHILE  shift, and go to state 19

    SEMICOLON  reduce using rule 12 (statement)
    SEMICOLON  [reduce using rule 15 (ifElseState)]
    $default   reduce using rule 10 (statements)

    statements   go to state 33
    statement    go to state 21
    ifElseState  go to state 22
    whileLoop    go to state 23


State 29

   20 condition: IDENT . EQ IDENT
   21          | IDENT . NEQ IDENT
   22          | IDENT . LT IDENT
   23          | IDENT . GT IDENT
   24          | IDENT . LTE IDENT
   25          | IDENT . GTE IDENT

    EQ   shift, and go to state 34
    NEQ  shift, and go to state 35
    LT   shift, and go to state 36
    GT   shift, and go to state 37
    LTE  shift, and go to state 38
    GTE  shift, and go to state 39


State 30

   16 ifElseState: IF L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY ifElseState

    R_PAREN  shift, and go to state 40


State 31

   17 ifElseState: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 41


State 32

   18 whileLoop: WHILE L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY

    R_PAREN  shift, and go to state 42


State 33

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 34

   20 condition: IDENT EQ . IDENT

    IDENT  shift, and go to state 43


State 35

   21 condition: IDENT NEQ . IDENT

    IDENT  shift, and go to state 44


State 36

   22 condition: IDENT LT . IDENT

    IDENT  shift, and go to state 45


State 37

   23 condition: IDENT GT . IDENT

    IDENT  shift, and go to state 46


State 38

   24 condition: IDENT LTE . IDENT

    IDENT  shift, and go to state 47


State 39

   25 condition: IDENT GTE . IDENT

    IDENT  shift, and go to state 48


State 40

   16 ifElseState: IF L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY ifElseState

    BEGIN_BODY  shift, and go to state 49


State 41

   17 ifElseState: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 17 (ifElseState)


State 42

   18 whileLoop: WHILE L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 50


State 43

   20 condition: IDENT EQ IDENT .

    $default  reduce using rule 20 (condition)


State 44

   21 condition: IDENT NEQ IDENT .

    $default  reduce using rule 21 (condition)


State 45

   22 condition: IDENT LT IDENT .

    $default  reduce using rule 22 (condition)


State 46

   23 condition: IDENT GT IDENT .

    $default  reduce using rule 23 (condition)


State 47

   24 condition: IDENT LTE IDENT .

    $default  reduce using rule 24 (condition)


State 48

   25 condition: IDENT GTE IDENT .

    $default  reduce using rule 25 (condition)


State 49

   16 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY ifElseState

    IF     shift, and go to state 17
    ELSE   shift, and go to state 18
    WHILE  shift, and go to state 19

    SEMICOLON  reduce using rule 12 (statement)
    SEMICOLON  [reduce using rule 15 (ifElseState)]
    $default   reduce using rule 10 (statements)

    statements   go to state 51
    statement    go to state 21
    ifElseState  go to state 22
    whileLoop    go to state 23


State 50

   18 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY

    IF     shift, and go to state 17
    ELSE   shift, and go to state 18
    WHILE  shift, and go to state 19

    SEMICOLON  reduce using rule 12 (statement)
    SEMICOLON  [reduce using rule 15 (ifElseState)]
    $default   reduce using rule 10 (statements)

    statements   go to state 52
    statement    go to state 21
    ifElseState  go to state 22
    whileLoop    go to state 23


State 51

   16 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY ifElseState

    END_BODY  shift, and go to state 53


State 52

   18 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 54


State 53

   16 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY . ifElseState

    IF    shift, and go to state 17
    ELSE  shift, and go to state 18

    $default  reduce using rule 15 (ifElseState)

    ifElseState  go to state 55


State 54

   18 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY .

    $default  reduce using rule 18 (whileLoop)


State 55

   16 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState .

    $default  reduce using rule 16 (ifElseState)
