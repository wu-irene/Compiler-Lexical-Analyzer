Terminals unused in grammar

   ARRAY
   OF
   THEN
   ENDIF
   DO
   CONTINUE
   READ
   NOT
   TRUE
   FALSE
   COLON
   EQUAL
   OUTPUT
   VOID


State 9 conflicts: 9 shift/reduce, 2 reduce/reduce
State 16 conflicts: 9 shift/reduce, 18 reduce/reduce
State 18 conflicts: 2 reduce/reduce
State 21 conflicts: 5 shift/reduce
State 23 conflicts: 15 shift/reduce, 18 reduce/reduce
State 45 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce
State 50 conflicts: 9 shift/reduce, 2 reduce/reduce
State 79 conflicts: 6 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 9 shift/reduce, 1 reduce/reduce
State 95 conflicts: 9 shift/reduce, 1 reduce/reduce
State 96 conflicts: 9 shift/reduce, 1 reduce/reduce
State 132 conflicts: 9 shift/reduce, 16 reduce/reduce
State 137 conflicts: 6 shift/reduce
State 141 conflicts: 9 shift/reduce, 1 reduce/reduce
State 146 conflicts: 9 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions

    5 functionstart: INTEGER IDENT
    6              | FUNCTION IDENT

    7 functionend: END_BODY

    8 parameters: parameter
    9           | parameter COMMA parameters

   10 parameter: %empty
   11          | INTEGER IDENT
   12          | IDENT
   13          | statements

   14 variable: IDENT
   15         | NUMBER

   16 statements: %empty
   17           | statement SEMICOLON
   18           | statement statements

   19 statement: %empty
   20          | ifElseState
   21          | ifState
   22          | breakState
   23          | whileLoop
   24          | assignment
   25          | definition
   26          | return
   27          | functionCall
   28          | math
   29          | write
   30          | variable
   31          | arrayAccess
   32          | arrayUnzip

   33 breakState: BREAK

   34 write: WRITE INPUT statement SEMICOLON

   35 math: variable MINUS variable
   36     | variable PLUS variable
   37     | variable MULT variable
   38     | variable DIV variable
   39     | variable MOD variable
   40     | statement MINUS variable
   41     | statement PLUS variable
   42     | statement MULT variable
   43     | statement DIV variable
   44     | statement MOD variable

   45 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

   47 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET

   48 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON

   49 arguments: argument
   50          | argument COMMA arguments

   51 argument: IDENT
   52         | NUMBER

   53 return: RETURN NUMBER SEMICOLON
   54       | RETURN IDENT SEMICOLON
   55       | RETURN statements

   56 definition: INTEGER IDENT SEMICOLON
   57           | INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

   58 ifState: ifStart R_PAREN BEGIN_BODY statements ifEnd

   59 ifStart: IF L_PAREN condition

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd elseStart BEGIN_BODY statements ifEnd

   61 ifElseStart: IFF L_PAREN condition

   62 elseStart: ELSE

   63 ifEnd: END_BODY

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY whileLoopBody statements statements whileLoopEnd

   65 whileLoopStart: WHILE L_PAREN

   66 whileLoopBody: %empty

   67 whileLoopEnd: END_BODY

   68 assignment: IDENT ASSIGN variable SEMICOLON
   69           | IDENT ASSIGN arrayUnzip SEMICOLON
   70           | IDENT ASSIGN statement SEMICOLON

   71 condition: variable LT variable
   72          | variable GT variable
   73          | variable LTE variable
   74          | variable GTE variable
   75          | variable EQ variable
   76          | variable NEQ variable


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 11 56 57
BREAK (259) 33
IFF (260) 61
FUNCTION (261) 6
BEGIN_BODY (262) 3 4 58 60 64
END_BODY (263) 7 63 67
ARRAY (264)
OF (265)
IF (266) 59
THEN (267)
ENDIF (268)
ELSE (269) 62
WHILE (270) 65
DO (271)
CONTINUE (272)
READ (273)
WRITE (274) 34
NOT (275)
TRUE (276)
FALSE (277)
RETURN (278) 53 54 55
MOD (279) 39 44
EQ (280) 75
NEQ (281) 76
LT (282) 71
GT (283) 72
LTE (284) 73
GTE (285) 74
SEMICOLON (286) 17 34 45 46 48 53 54 56 57 68 69 70
COLON (287)
COMMA (288) 9 50
L_SQUARE_BRACKET (289) 45 46 47 57
R_SQUARE_BRACKET (290) 45 46 47 57
EQUAL (291)
NUMBER (292) 15 52 53
PLUS (293) 36 41
MINUS (294) 35 40
MULT (295) 37 42
DIV (296) 38 43
L_PAREN (297) 3 4 48 59 61 65
R_PAREN (298) 3 4 48 58 60 64
ASSIGN (299) 45 46 48 68 69 70
INPUT (300) 34
OUTPUT (301)
IDENT (302) 5 6 11 12 14 48 51 54 56 57 68 69 70
VOID (303)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
prog_start (50)
    on left: 1 2, on right: 0
functions (51)
    on left: 3 4, on right: 2 4
functionstart (52)
    on left: 5 6, on right: 3 4
functionend (53)
    on left: 7, on right: 3 4
parameters (54)
    on left: 8 9, on right: 3 4 9
parameter (55)
    on left: 10 11 12 13, on right: 8 9
variable (56)
    on left: 14 15, on right: 30 35 36 37 38 39 40 41 42 43 44 45 46
    47 57 68 71 72 73 74 75 76
statements (57)
    on left: 16 17 18, on right: 3 4 13 18 55 58 60 64
statement (58)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32, on right: 17
    18 34 40 41 42 43 44 45 70
breakState (59)
    on left: 33, on right: 22
write (60)
    on left: 34, on right: 29
math (61)
    on left: 35 36 37 38 39 40 41 42 43 44, on right: 28
arrayAccess (62)
    on left: 45 46, on right: 31
arrayUnzip (63)
    on left: 47, on right: 32 69
functionCall (64)
    on left: 48, on right: 27
arguments (65)
    on left: 49 50, on right: 48 50
argument (66)
    on left: 51 52, on right: 49 50
return (67)
    on left: 53 54 55, on right: 26
definition (68)
    on left: 56 57, on right: 25
ifState (69)
    on left: 58, on right: 21
ifStart (70)
    on left: 59, on right: 58
ifElseState (71)
    on left: 60, on right: 20
ifElseStart (72)
    on left: 61, on right: 60
elseStart (73)
    on left: 62, on right: 60
ifEnd (74)
    on left: 63, on right: 58 60
whileLoop (75)
    on left: 64, on right: 23
whileLoopStart (76)
    on left: 65, on right: 64
whileLoopBody (77)
    on left: 66, on right: 64
whileLoopEnd (78)
    on left: 67, on right: 64
assignment (79)
    on left: 68 69 70, on right: 24
condition (80)
    on left: 71 72 73 74 75 76, on right: 59 61 64


State 0

    0 $accept: . prog_start $end

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 1 (prog_start)

    prog_start     go to state 3
    functions      go to state 4
    functionstart  go to state 5


State 1

    5 functionstart: INTEGER . IDENT

    IDENT  shift, and go to state 6


State 2

    6 functionstart: FUNCTION . IDENT

    IDENT  shift, and go to state 7


State 3

    0 $accept: prog_start . $end

    $end  shift, and go to state 8


State 4

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 5

    3 functions: functionstart . L_PAREN parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart . L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions

    L_PAREN  shift, and go to state 9


State 6

    5 functionstart: INTEGER IDENT .

    $default  reduce using rule 5 (functionstart)


State 7

    6 functionstart: FUNCTION IDENT .

    $default  reduce using rule 6 (functionstart)


State 8

    0 $accept: prog_start $end .

    $default  accept


State 9

    3 functions: functionstart L_PAREN . parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN . parameters R_PAREN BEGIN_BODY statements functionend functions

    INTEGER  shift, and go to state 10
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 18

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    COMMA     reduce using rule 10 (parameter)
    COMMA     [reduce using rule 16 (statements)]
    COMMA     [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    R_PAREN   reduce using rule 10 (parameter)
    R_PAREN   [reduce using rule 16 (statements)]
    R_PAREN   [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    parameters      go to state 19
    parameter       go to state 20
    variable        go to state 21
    statements      go to state 22
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 10

   11 parameter: INTEGER . IDENT
   56 definition: INTEGER . IDENT SEMICOLON
   57           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 39


State 11

   33 breakState: BREAK .

    $default  reduce using rule 33 (breakState)


State 12

   61 ifElseStart: IFF . L_PAREN condition

    L_PAREN  shift, and go to state 40


State 13

   59 ifStart: IF . L_PAREN condition

    L_PAREN  shift, and go to state 41


State 14

   65 whileLoopStart: WHILE . L_PAREN

    L_PAREN  shift, and go to state 42


State 15

   34 write: WRITE . INPUT statement SEMICOLON

    INPUT  shift, and go to state 43


State 16

   53 return: RETURN . NUMBER SEMICOLON
   54       | RETURN . IDENT SEMICOLON
   55       | RETURN . statements

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 45
    IDENT    shift, and go to state 46

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    BREAK      [reduce using rule 16 (statements)]
    BREAK      [reduce using rule 19 (statement)]
    IFF        [reduce using rule 16 (statements)]
    IFF        [reduce using rule 19 (statement)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    MOD        reduce using rule 16 (statements)
    MOD        [reduce using rule 19 (statement)]
    SEMICOLON  reduce using rule 16 (statements)
    SEMICOLON  [reduce using rule 19 (statement)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    PLUS       reduce using rule 16 (statements)
    PLUS       [reduce using rule 19 (statement)]
    MINUS      reduce using rule 16 (statements)
    MINUS      [reduce using rule 19 (statement)]
    MULT       reduce using rule 16 (statements)
    MULT       [reduce using rule 19 (statement)]
    DIV        reduce using rule 16 (statements)
    DIV        [reduce using rule 19 (statement)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    $default   reduce using rule 16 (statements)

    variable        go to state 21
    statements      go to state 47
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 17

   15 variable: NUMBER .

    $default  reduce using rule 15 (variable)


State 18

   12 parameter: IDENT .
   14 variable: IDENT .
   48 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   68 assignment: IDENT . ASSIGN variable SEMICOLON
   69           | IDENT . ASSIGN arrayUnzip SEMICOLON
   70           | IDENT . ASSIGN statement SEMICOLON

    ASSIGN  shift, and go to state 48

    COMMA     reduce using rule 12 (parameter)
    COMMA     [reduce using rule 14 (variable)]
    R_PAREN   reduce using rule 12 (parameter)
    R_PAREN   [reduce using rule 14 (variable)]
    $default  reduce using rule 14 (variable)


State 19

    3 functions: functionstart L_PAREN parameters . R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters . R_PAREN BEGIN_BODY statements functionend functions

    R_PAREN  shift, and go to state 49


State 20

    8 parameters: parameter .
    9           | parameter . COMMA parameters

    COMMA  shift, and go to state 50

    $default  reduce using rule 8 (parameters)


State 21

   30 statement: variable .
   35 math: variable . MINUS variable
   36     | variable . PLUS variable
   37     | variable . MULT variable
   38     | variable . DIV variable
   39     | variable . MOD variable
   45 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   47 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 51
    L_SQUARE_BRACKET  shift, and go to state 52
    PLUS              shift, and go to state 53
    MINUS             shift, and go to state 54
    MULT              shift, and go to state 55
    DIV               shift, and go to state 56

    MOD       [reduce using rule 30 (statement)]
    PLUS      [reduce using rule 30 (statement)]
    MINUS     [reduce using rule 30 (statement)]
    MULT      [reduce using rule 30 (statement)]
    DIV       [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 22

   13 parameter: statements .

    $default  reduce using rule 13 (parameter)


State 23

   17 statements: statement . SEMICOLON
   18           | statement . statements
   40 math: statement . MINUS variable
   41     | statement . PLUS variable
   42     | statement . MULT variable
   43     | statement . DIV variable
   44     | statement . MOD variable

    INTEGER    shift, and go to state 44
    BREAK      shift, and go to state 11
    IFF        shift, and go to state 12
    IF         shift, and go to state 13
    WHILE      shift, and go to state 14
    WRITE      shift, and go to state 15
    RETURN     shift, and go to state 16
    MOD        shift, and go to state 57
    SEMICOLON  shift, and go to state 58
    NUMBER     shift, and go to state 17
    PLUS       shift, and go to state 59
    MINUS      shift, and go to state 60
    MULT       shift, and go to state 61
    DIV        shift, and go to state 62
    IDENT      shift, and go to state 63

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    BREAK      [reduce using rule 16 (statements)]
    BREAK      [reduce using rule 19 (statement)]
    IFF        [reduce using rule 16 (statements)]
    IFF        [reduce using rule 19 (statement)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    MOD        [reduce using rule 16 (statements)]
    MOD        [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 16 (statements)]
    SEMICOLON  [reduce using rule 19 (statement)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    PLUS       [reduce using rule 16 (statements)]
    PLUS       [reduce using rule 19 (statement)]
    MINUS      [reduce using rule 16 (statements)]
    MINUS      [reduce using rule 19 (statement)]
    MULT       [reduce using rule 16 (statements)]
    MULT       [reduce using rule 19 (statement)]
    DIV        [reduce using rule 16 (statements)]
    DIV        [reduce using rule 19 (statement)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    $default   reduce using rule 16 (statements)

    variable        go to state 21
    statements      go to state 64
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 24

   22 statement: breakState .

    $default  reduce using rule 22 (statement)


State 25

   29 statement: write .

    $default  reduce using rule 29 (statement)


State 26

   28 statement: math .

    $default  reduce using rule 28 (statement)


State 27

   31 statement: arrayAccess .

    $default  reduce using rule 31 (statement)


State 28

   32 statement: arrayUnzip .

    $default  reduce using rule 32 (statement)


State 29

   27 statement: functionCall .

    $default  reduce using rule 27 (statement)


State 30

   26 statement: return .

    $default  reduce using rule 26 (statement)


State 31

   25 statement: definition .

    $default  reduce using rule 25 (statement)


State 32

   21 statement: ifState .

    $default  reduce using rule 21 (statement)


State 33

   58 ifState: ifStart . R_PAREN BEGIN_BODY statements ifEnd

    R_PAREN  shift, and go to state 65


State 34

   20 statement: ifElseState .

    $default  reduce using rule 20 (statement)


State 35

   60 ifElseState: ifElseStart . R_PAREN BEGIN_BODY statements ifEnd elseStart BEGIN_BODY statements ifEnd

    R_PAREN  shift, and go to state 66


State 36

   23 statement: whileLoop .

    $default  reduce using rule 23 (statement)


State 37

   64 whileLoop: whileLoopStart . condition R_PAREN BEGIN_BODY whileLoopBody statements statements whileLoopEnd

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable   go to state 68
    condition  go to state 69


State 38

   24 statement: assignment .

    $default  reduce using rule 24 (statement)


State 39

   11 parameter: INTEGER IDENT .
   56 definition: INTEGER IDENT . SEMICOLON
   57           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 70
    L_SQUARE_BRACKET  shift, and go to state 71

    $default  reduce using rule 11 (parameter)


State 40

   61 ifElseStart: IFF L_PAREN . condition

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable   go to state 68
    condition  go to state 72


State 41

   59 ifStart: IF L_PAREN . condition

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable   go to state 68
    condition  go to state 73


State 42

   65 whileLoopStart: WHILE L_PAREN .

    $default  reduce using rule 65 (whileLoopStart)


State 43

   34 write: WRITE INPUT . statement SEMICOLON

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statement       go to state 74
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 44

   56 definition: INTEGER . IDENT SEMICOLON
   57           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 75


State 45

   15 variable: NUMBER .
   53 return: RETURN NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 76

    SEMICOLON  [reduce using rule 15 (variable)]
    $default   reduce using rule 15 (variable)


State 46

   14 variable: IDENT .
   48 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   54 return: RETURN IDENT . SEMICOLON
   68 assignment: IDENT . ASSIGN variable SEMICOLON
   69           | IDENT . ASSIGN arrayUnzip SEMICOLON
   70           | IDENT . ASSIGN statement SEMICOLON

    SEMICOLON  shift, and go to state 77
    ASSIGN     shift, and go to state 48

    SEMICOLON  [reduce using rule 14 (variable)]
    $default   reduce using rule 14 (variable)


State 47

   55 return: RETURN statements .

    $default  reduce using rule 55 (return)


State 48

   48 functionCall: IDENT ASSIGN . IDENT L_PAREN arguments R_PAREN SEMICOLON
   68 assignment: IDENT ASSIGN . variable SEMICOLON
   69           | IDENT ASSIGN . arrayUnzip SEMICOLON
   70           | IDENT ASSIGN . statement SEMICOLON

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 78

    $default  reduce using rule 19 (statement)

    variable        go to state 79
    statement       go to state 80
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 81
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 49

    3 functions: functionstart L_PAREN parameters R_PAREN . BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters R_PAREN . BEGIN_BODY statements functionend functions

    BEGIN_BODY  shift, and go to state 82


State 50

    9 parameters: parameter COMMA . parameters

    INTEGER  shift, and go to state 10
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 18

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    COMMA     reduce using rule 10 (parameter)
    COMMA     [reduce using rule 16 (statements)]
    COMMA     [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    R_PAREN   reduce using rule 10 (parameter)
    R_PAREN   [reduce using rule 16 (statements)]
    R_PAREN   [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    parameters      go to state 83
    parameter       go to state 20
    variable        go to state 21
    statements      go to state 22
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 51

   39 math: variable MOD . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 84


State 52

   45 arrayAccess: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   47 arrayUnzip: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 85


State 53

   36 math: variable PLUS . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 86


State 54

   35 math: variable MINUS . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 87


State 55

   37 math: variable MULT . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 88


State 56

   38 math: variable DIV . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 89


State 57

   44 math: statement MOD . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 90


State 58

   17 statements: statement SEMICOLON .

    $default  reduce using rule 17 (statements)


State 59

   41 math: statement PLUS . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 91


State 60

   40 math: statement MINUS . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 92


State 61

   42 math: statement MULT . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 93


State 62

   43 math: statement DIV . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 94


State 63

   14 variable: IDENT .
   48 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   68 assignment: IDENT . ASSIGN variable SEMICOLON
   69           | IDENT . ASSIGN arrayUnzip SEMICOLON
   70           | IDENT . ASSIGN statement SEMICOLON

    ASSIGN  shift, and go to state 48

    $default  reduce using rule 14 (variable)


State 64

   18 statements: statement statements .

    $default  reduce using rule 18 (statements)


State 65

   58 ifState: ifStart R_PAREN . BEGIN_BODY statements ifEnd

    BEGIN_BODY  shift, and go to state 95


State 66

   60 ifElseState: ifElseStart R_PAREN . BEGIN_BODY statements ifEnd elseStart BEGIN_BODY statements ifEnd

    BEGIN_BODY  shift, and go to state 96


State 67

   14 variable: IDENT .

    $default  reduce using rule 14 (variable)


State 68

   71 condition: variable . LT variable
   72          | variable . GT variable
   73          | variable . LTE variable
   74          | variable . GTE variable
   75          | variable . EQ variable
   76          | variable . NEQ variable

    EQ   shift, and go to state 97
    NEQ  shift, and go to state 98
    LT   shift, and go to state 99
    GT   shift, and go to state 100
    LTE  shift, and go to state 101
    GTE  shift, and go to state 102


State 69

   64 whileLoop: whileLoopStart condition . R_PAREN BEGIN_BODY whileLoopBody statements statements whileLoopEnd

    R_PAREN  shift, and go to state 103


State 70

   56 definition: INTEGER IDENT SEMICOLON .

    $default  reduce using rule 56 (definition)


State 71

   57 definition: INTEGER IDENT L_SQUARE_BRACKET . variable R_SQUARE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 104


State 72

   61 ifElseStart: IFF L_PAREN condition .

    $default  reduce using rule 61 (ifElseStart)


State 73

   59 ifStart: IF L_PAREN condition .

    $default  reduce using rule 59 (ifStart)


State 74

   34 write: WRITE INPUT statement . SEMICOLON
   40 math: statement . MINUS variable
   41     | statement . PLUS variable
   42     | statement . MULT variable
   43     | statement . DIV variable
   44     | statement . MOD variable

    MOD        shift, and go to state 57
    SEMICOLON  shift, and go to state 105
    PLUS       shift, and go to state 59
    MINUS      shift, and go to state 60
    MULT       shift, and go to state 61
    DIV        shift, and go to state 62


State 75

   56 definition: INTEGER IDENT . SEMICOLON
   57           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 70
    L_SQUARE_BRACKET  shift, and go to state 71


State 76

   53 return: RETURN NUMBER SEMICOLON .

    $default  reduce using rule 53 (return)


State 77

   54 return: RETURN IDENT SEMICOLON .

    $default  reduce using rule 54 (return)


State 78

   14 variable: IDENT .
   48 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   48             | IDENT ASSIGN IDENT . L_PAREN arguments R_PAREN SEMICOLON
   68 assignment: IDENT . ASSIGN variable SEMICOLON
   69           | IDENT . ASSIGN arrayUnzip SEMICOLON
   70           | IDENT . ASSIGN statement SEMICOLON

    L_PAREN  shift, and go to state 106
    ASSIGN   shift, and go to state 48

    $default  reduce using rule 14 (variable)


State 79

   30 statement: variable .
   35 math: variable . MINUS variable
   36     | variable . PLUS variable
   37     | variable . MULT variable
   38     | variable . DIV variable
   39     | variable . MOD variable
   45 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   47 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET
   68 assignment: IDENT ASSIGN variable . SEMICOLON

    MOD               shift, and go to state 51
    SEMICOLON         shift, and go to state 107
    L_SQUARE_BRACKET  shift, and go to state 52
    PLUS              shift, and go to state 53
    MINUS             shift, and go to state 54
    MULT              shift, and go to state 55
    DIV               shift, and go to state 56

    MOD        [reduce using rule 30 (statement)]
    SEMICOLON  [reduce using rule 30 (statement)]
    PLUS       [reduce using rule 30 (statement)]
    MINUS      [reduce using rule 30 (statement)]
    MULT       [reduce using rule 30 (statement)]
    DIV        [reduce using rule 30 (statement)]


State 80

   40 math: statement . MINUS variable
   41     | statement . PLUS variable
   42     | statement . MULT variable
   43     | statement . DIV variable
   44     | statement . MOD variable
   70 assignment: IDENT ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 57
    SEMICOLON  shift, and go to state 108
    PLUS       shift, and go to state 59
    MINUS      shift, and go to state 60
    MULT       shift, and go to state 61
    DIV        shift, and go to state 62


State 81

   32 statement: arrayUnzip .
   69 assignment: IDENT ASSIGN arrayUnzip . SEMICOLON

    SEMICOLON  shift, and go to state 109

    SEMICOLON  [reduce using rule 32 (statement)]
    $default   reduce using rule 32 (statement)


State 82

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY . statements functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY . statements functionend functions

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    END_BODY  reduce using rule 16 (statements)
    END_BODY  [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statements      go to state 110
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 83

    9 parameters: parameter COMMA parameters .

    $default  reduce using rule 9 (parameters)


State 84

   39 math: variable MOD variable .

    $default  reduce using rule 39 (math)


State 85

   45 arrayAccess: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   47 arrayUnzip: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 111


State 86

   36 math: variable PLUS variable .

    $default  reduce using rule 36 (math)


State 87

   35 math: variable MINUS variable .

    $default  reduce using rule 35 (math)


State 88

   37 math: variable MULT variable .

    $default  reduce using rule 37 (math)


State 89

   38 math: variable DIV variable .

    $default  reduce using rule 38 (math)


State 90

   44 math: statement MOD variable .

    $default  reduce using rule 44 (math)


State 91

   41 math: statement PLUS variable .

    $default  reduce using rule 41 (math)


State 92

   40 math: statement MINUS variable .

    $default  reduce using rule 40 (math)


State 93

   42 math: statement MULT variable .

    $default  reduce using rule 42 (math)


State 94

   43 math: statement DIV variable .

    $default  reduce using rule 43 (math)


State 95

   58 ifState: ifStart R_PAREN BEGIN_BODY . statements ifEnd

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    END_BODY  reduce using rule 16 (statements)
    END_BODY  [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statements      go to state 112
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 96

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY . statements ifEnd elseStart BEGIN_BODY statements ifEnd

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    END_BODY  reduce using rule 16 (statements)
    END_BODY  [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statements      go to state 113
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 97

   75 condition: variable EQ . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 114


State 98

   76 condition: variable NEQ . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 115


State 99

   71 condition: variable LT . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 116


State 100

   72 condition: variable GT . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 117


State 101

   73 condition: variable LTE . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 118


State 102

   74 condition: variable GTE . variable

    NUMBER  shift, and go to state 17
    IDENT   shift, and go to state 67

    variable  go to state 119


State 103

   64 whileLoop: whileLoopStart condition R_PAREN . BEGIN_BODY whileLoopBody statements statements whileLoopEnd

    BEGIN_BODY  shift, and go to state 120


State 104

   57 definition: INTEGER IDENT L_SQUARE_BRACKET variable . R_SQUARE_BRACKET SEMICOLON

    R_SQUARE_BRACKET  shift, and go to state 121


State 105

   34 write: WRITE INPUT statement SEMICOLON .

    $default  reduce using rule 34 (write)


State 106

   48 functionCall: IDENT ASSIGN IDENT L_PAREN . arguments R_PAREN SEMICOLON

    NUMBER  shift, and go to state 122
    IDENT   shift, and go to state 123

    arguments  go to state 124
    argument   go to state 125


State 107

   68 assignment: IDENT ASSIGN variable SEMICOLON .

    $default  reduce using rule 68 (assignment)


State 108

   70 assignment: IDENT ASSIGN statement SEMICOLON .

    $default  reduce using rule 70 (assignment)


State 109

   69 assignment: IDENT ASSIGN arrayUnzip SEMICOLON .

    $default  reduce using rule 69 (assignment)


State 110

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements . functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements . functionend functions

    END_BODY  shift, and go to state 126

    functionend  go to state 127


State 111

   45 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN statement SEMICOLON
   46            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN variable SEMICOLON
   47 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET .

    ASSIGN  shift, and go to state 128

    $default  reduce using rule 47 (arrayUnzip)


State 112

   58 ifState: ifStart R_PAREN BEGIN_BODY statements . ifEnd

    END_BODY  shift, and go to state 129

    ifEnd  go to state 130


State 113

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements . ifEnd elseStart BEGIN_BODY statements ifEnd

    END_BODY  shift, and go to state 129

    ifEnd  go to state 131


State 114

   75 condition: variable EQ variable .

    $default  reduce using rule 75 (condition)


State 115

   76 condition: variable NEQ variable .

    $default  reduce using rule 76 (condition)


State 116

   71 condition: variable LT variable .

    $default  reduce using rule 71 (condition)


State 117

   72 condition: variable GT variable .

    $default  reduce using rule 72 (condition)


State 118

   73 condition: variable LTE variable .

    $default  reduce using rule 73 (condition)


State 119

   74 condition: variable GTE variable .

    $default  reduce using rule 74 (condition)


State 120

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY . whileLoopBody statements statements whileLoopEnd

    $default  reduce using rule 66 (whileLoopBody)

    whileLoopBody  go to state 132


State 121

   57 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 133


State 122

   52 argument: NUMBER .

    $default  reduce using rule 52 (argument)


State 123

   51 argument: IDENT .

    $default  reduce using rule 51 (argument)


State 124

   48 functionCall: IDENT ASSIGN IDENT L_PAREN arguments . R_PAREN SEMICOLON

    R_PAREN  shift, and go to state 134


State 125

   49 arguments: argument .
   50          | argument . COMMA arguments

    COMMA  shift, and go to state 135

    $default  reduce using rule 49 (arguments)


State 126

    7 functionend: END_BODY .

    $default  reduce using rule 7 (functionend)


State 127

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend .
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend . functions

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 3 (functions)

    functions      go to state 136
    functionstart  go to state 5


State 128

   45 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . statement SEMICOLON
   46            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . variable SEMICOLON

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    $default  reduce using rule 19 (statement)

    variable        go to state 137
    statement       go to state 138
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 129

   63 ifEnd: END_BODY .

    $default  reduce using rule 63 (ifEnd)


State 130

   58 ifState: ifStart R_PAREN BEGIN_BODY statements ifEnd .

    $default  reduce using rule 58 (ifState)


State 131

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd . elseStart BEGIN_BODY statements ifEnd

    ELSE  shift, and go to state 139

    elseStart  go to state 140


State 132

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY whileLoopBody . statements statements whileLoopEnd

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    BREAK      [reduce using rule 16 (statements)]
    BREAK      [reduce using rule 19 (statement)]
    IFF        [reduce using rule 16 (statements)]
    IFF        [reduce using rule 19 (statement)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    MOD        reduce using rule 16 (statements)
    MOD        [reduce using rule 19 (statement)]
    SEMICOLON  reduce using rule 16 (statements)
    SEMICOLON  [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    PLUS       reduce using rule 16 (statements)
    PLUS       [reduce using rule 19 (statement)]
    MINUS      reduce using rule 16 (statements)
    MINUS      [reduce using rule 19 (statement)]
    MULT       reduce using rule 16 (statements)
    MULT       [reduce using rule 19 (statement)]
    DIV        reduce using rule 16 (statements)
    DIV        [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    $default   reduce using rule 16 (statements)

    variable        go to state 21
    statements      go to state 141
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 133

   57 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON .

    $default  reduce using rule 57 (definition)


State 134

   48 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 142


State 135

   50 arguments: argument COMMA . arguments

    NUMBER  shift, and go to state 122
    IDENT   shift, and go to state 123

    arguments  go to state 143
    argument   go to state 125


State 136

    4 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions .

    $default  reduce using rule 4 (functions)


State 137

   30 statement: variable .
   35 math: variable . MINUS variable
   36     | variable . PLUS variable
   37     | variable . MULT variable
   38     | variable . DIV variable
   39     | variable . MOD variable
   45 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   46            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   46            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable . SEMICOLON
   47 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 51
    SEMICOLON         shift, and go to state 144
    L_SQUARE_BRACKET  shift, and go to state 52
    PLUS              shift, and go to state 53
    MINUS             shift, and go to state 54
    MULT              shift, and go to state 55
    DIV               shift, and go to state 56

    MOD        [reduce using rule 30 (statement)]
    SEMICOLON  [reduce using rule 30 (statement)]
    PLUS       [reduce using rule 30 (statement)]
    MINUS      [reduce using rule 30 (statement)]
    MULT       [reduce using rule 30 (statement)]
    DIV        [reduce using rule 30 (statement)]


State 138

   40 math: statement . MINUS variable
   41     | statement . PLUS variable
   42     | statement . MULT variable
   43     | statement . DIV variable
   44     | statement . MOD variable
   45 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 57
    SEMICOLON  shift, and go to state 145
    PLUS       shift, and go to state 59
    MINUS      shift, and go to state 60
    MULT       shift, and go to state 61
    DIV        shift, and go to state 62


State 139

   62 elseStart: ELSE .

    $default  reduce using rule 62 (elseStart)


State 140

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd elseStart . BEGIN_BODY statements ifEnd

    BEGIN_BODY  shift, and go to state 146


State 141

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY whileLoopBody statements . statements whileLoopEnd

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    END_BODY  reduce using rule 16 (statements)
    END_BODY  [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statements      go to state 147
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 142

   48 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON .

    $default  reduce using rule 48 (functionCall)


State 143

   50 arguments: argument COMMA arguments .

    $default  reduce using rule 50 (arguments)


State 144

   46 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON .

    $default  reduce using rule 46 (arrayAccess)


State 145

   45 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON .

    $default  reduce using rule 45 (arrayAccess)


State 146

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd elseStart BEGIN_BODY . statements ifEnd

    INTEGER  shift, and go to state 44
    BREAK    shift, and go to state 11
    IFF      shift, and go to state 12
    IF       shift, and go to state 13
    WHILE    shift, and go to state 14
    WRITE    shift, and go to state 15
    RETURN   shift, and go to state 16
    NUMBER   shift, and go to state 17
    IDENT    shift, and go to state 63

    INTEGER   [reduce using rule 19 (statement)]
    BREAK     [reduce using rule 19 (statement)]
    IFF       [reduce using rule 19 (statement)]
    END_BODY  reduce using rule 16 (statements)
    END_BODY  [reduce using rule 19 (statement)]
    IF        [reduce using rule 19 (statement)]
    WHILE     [reduce using rule 19 (statement)]
    WRITE     [reduce using rule 19 (statement)]
    RETURN    [reduce using rule 19 (statement)]
    NUMBER    [reduce using rule 19 (statement)]
    IDENT     [reduce using rule 19 (statement)]
    $default  reduce using rule 19 (statement)

    variable        go to state 21
    statements      go to state 148
    statement       go to state 23
    breakState      go to state 24
    write           go to state 25
    math            go to state 26
    arrayAccess     go to state 27
    arrayUnzip      go to state 28
    functionCall    go to state 29
    return          go to state 30
    definition      go to state 31
    ifState         go to state 32
    ifStart         go to state 33
    ifElseState     go to state 34
    ifElseStart     go to state 35
    whileLoop       go to state 36
    whileLoopStart  go to state 37
    assignment      go to state 38


State 147

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY whileLoopBody statements statements . whileLoopEnd

    END_BODY  shift, and go to state 149

    whileLoopEnd  go to state 150


State 148

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd elseStart BEGIN_BODY statements . ifEnd

    END_BODY  shift, and go to state 129

    ifEnd  go to state 151


State 149

   67 whileLoopEnd: END_BODY .

    $default  reduce using rule 67 (whileLoopEnd)


State 150

   64 whileLoop: whileLoopStart condition R_PAREN BEGIN_BODY whileLoopBody statements statements whileLoopEnd .

    $default  reduce using rule 64 (whileLoop)


State 151

   60 ifElseState: ifElseStart R_PAREN BEGIN_BODY statements ifEnd elseStart BEGIN_BODY statements ifEnd .

    $default  reduce using rule 60 (ifElseState)
