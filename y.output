Terminals unused in grammar

   ARRAY
   OF
   THEN
   ENDIF
   DO
   CONTINUE
   BREAK
   READ
   NOT
   TRUE
   FALSE
   COLON
   EQUAL
   OUTPUT
   VOID


State 9 conflicts: 8 shift/reduce, 16 reduce/reduce
State 15 conflicts: 8 shift/reduce, 17 reduce/reduce
State 17 conflicts: 2 reduce/reduce
State 20 conflicts: 5 shift/reduce
State 22 conflicts: 14 shift/reduce, 17 reduce/reduce
State 35 conflicts: 8 shift/reduce, 15 reduce/reduce
State 37 conflicts: 6 reduce/reduce
State 39 conflicts: 1 shift/reduce
State 40 conflicts: 1 shift/reduce
State 42 conflicts: 6 reduce/reduce
State 44 conflicts: 8 shift/reduce, 16 reduce/reduce
State 70 conflicts: 6 shift/reduce
State 72 conflicts: 1 shift/reduce
State 73 conflicts: 8 shift/reduce, 15 reduce/reduce
State 117 conflicts: 8 shift/reduce, 15 reduce/reduce
State 118 conflicts: 8 shift/reduce, 15 reduce/reduce
State 125 conflicts: 6 reduce/reduce
State 132 conflicts: 6 shift/reduce
State 134 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions

    5 functionstart: INTEGER IDENT
    6              | FUNCTION IDENT

    7 functionend: END_BODY

    8 parameters: parameter
    9           | parameter COMMA parameters

   10 parameter: %empty
   11          | INTEGER IDENT
   12          | IDENT
   13          | statements

   14 variable: IDENT
   15         | NUMBER

   16 statements: %empty
   17           | statement SEMICOLON
   18           | statement statements

   19 statement: %empty
   20          | ifElseState
   21          | whileLoop
   22          | assignment
   23          | definition
   24          | return
   25          | functionCall
   26          | math
   27          | write
   28          | variable
   29          | arrayAccess
   30          | arrayUnzip

   31 write: WRITE INPUT statement SEMICOLON

   32 math: variable MINUS variable
   33     | variable PLUS variable
   34     | variable MULT variable
   35     | variable DIV variable
   36     | variable MOD variable
   37     | statement MINUS variable
   38     | statement PLUS variable
   39     | statement MULT variable
   40     | statement DIV variable
   41     | statement MOD variable

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

   44 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET

   45 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON

   46 arguments: argument
   47          | argument COMMA arguments

   48 argument: IDENT
   49         | NUMBER

   50 return: RETURN NUMBER SEMICOLON
   51       | RETURN IDENT SEMICOLON
   52       | RETURN statements

   53 definition: INTEGER IDENT SEMICOLON
   54           | INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

   55 ifElseState: %empty
   56            | IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState
   57            | ELSE BEGIN_BODY statements END_BODY

   58 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

   59 assignment: IDENT ASSIGN variable SEMICOLON
   60           | IDENT ASSIGN arrayUnzip SEMICOLON
   61           | IDENT ASSIGN statement SEMICOLON

   62 condition: %empty
   63          | IDENT EQ IDENT
   64          | IDENT NEQ IDENT
   65          | IDENT LT IDENT
   66          | IDENT GT IDENT
   67          | IDENT LTE IDENT
   68          | IDENT GTE IDENT
   69          | IDENT EQ NUMBER
   70          | IDENT NEQ NUMBER
   71          | IDENT LT NUMBER
   72          | IDENT GT NUMBER
   73          | IDENT LTE NUMBER
   74          | IDENT GTE NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 11 53 54
FUNCTION (259) 6
BEGIN_BODY (260) 3 4 56 57 58
END_BODY (261) 7 56 57 58
ARRAY (262)
OF (263)
IF (264) 56
THEN (265)
ENDIF (266)
ELSE (267) 57
WHILE (268) 58
DO (269)
CONTINUE (270)
BREAK (271)
READ (272)
WRITE (273) 31
NOT (274)
TRUE (275)
FALSE (276)
RETURN (277) 50 51 52
MOD (278) 36 41
EQ (279) 63 69
NEQ (280) 64 70
LT (281) 65 71
GT (282) 66 72
LTE (283) 67 73
GTE (284) 68 74
SEMICOLON (285) 17 31 42 43 45 50 51 53 54 59 60 61
COLON (286)
COMMA (287) 9 47
L_SQUARE_BRACKET (288) 42 43 44 54
R_SQUARE_BRACKET (289) 42 43 44 54
EQUAL (290)
NUMBER (291) 15 49 50 69 70 71 72 73 74
PLUS (292) 33 38
MINUS (293) 32 37
MULT (294) 34 39
DIV (295) 35 40
L_PAREN (296) 3 4 45 56 58
R_PAREN (297) 3 4 45 56 58
ASSIGN (298) 42 43 45 59 60 61
INPUT (299) 31
OUTPUT (300)
IDENT (301) 5 6 11 12 14 45 48 51 53 54 59 60 61 63 64 65 66 67 68
    69 70 71 72 73 74
VOID (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
prog_start (49)
    on left: 1 2, on right: 0
functions (50)
    on left: 3 4, on right: 2 4
functionstart (51)
    on left: 5 6, on right: 3 4
functionend (52)
    on left: 7, on right: 3 4
parameters (53)
    on left: 8 9, on right: 3 4 9
parameter (54)
    on left: 10 11 12 13, on right: 8 9
variable (55)
    on left: 14 15, on right: 28 32 33 34 35 36 37 38 39 40 41 42 43
    44 54 59
statements (56)
    on left: 16 17 18, on right: 3 4 13 18 52 56 57 58
statement (57)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30, on right: 17 18 31
    37 38 39 40 41 42 61
write (58)
    on left: 31, on right: 27
math (59)
    on left: 32 33 34 35 36 37 38 39 40 41, on right: 26
arrayAccess (60)
    on left: 42 43, on right: 29
arrayUnzip (61)
    on left: 44, on right: 30 60
functionCall (62)
    on left: 45, on right: 25
arguments (63)
    on left: 46 47, on right: 45 47
argument (64)
    on left: 48 49, on right: 46 47
return (65)
    on left: 50 51 52, on right: 24
definition (66)
    on left: 53 54, on right: 23
ifElseState (67)
    on left: 55 56 57, on right: 20 56
whileLoop (68)
    on left: 58, on right: 21
assignment (69)
    on left: 59 60 61, on right: 22
condition (70)
    on left: 62 63 64 65 66 67 68 69 70 71 72 73 74, on right: 56 58


State 0

    0 $accept: . prog_start $end

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 1 (prog_start)

    prog_start     go to state 3
    functions      go to state 4
    functionstart  go to state 5


State 1

    5 functionstart: INTEGER . IDENT

    IDENT  shift, and go to state 6


State 2

    6 functionstart: FUNCTION . IDENT

    IDENT  shift, and go to state 7


State 3

    0 $accept: prog_start . $end

    $end  shift, and go to state 8


State 4

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 5

    3 functions: functionstart . L_PAREN parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart . L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions

    L_PAREN  shift, and go to state 9


State 6

    5 functionstart: INTEGER IDENT .

    $default  reduce using rule 5 (functionstart)


State 7

    6 functionstart: FUNCTION IDENT .

    $default  reduce using rule 6 (functionstart)


State 8

    0 $accept: prog_start $end .

    $default  accept


State 9

    3 functions: functionstart L_PAREN . parameters R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN . parameters R_PAREN BEGIN_BODY statements functionend functions

    INTEGER  shift, and go to state 10
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 17

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    COMMA      reduce using rule 10 (parameter)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    R_PAREN    reduce using rule 10 (parameter)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    parameters    go to state 18
    parameter     go to state 19
    variable      go to state 20
    statements    go to state 21
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 10

   11 parameter: INTEGER . IDENT
   53 definition: INTEGER . IDENT SEMICOLON
   54           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 33


State 11

   56 ifElseState: IF . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    L_PAREN  shift, and go to state 34


State 12

   57 ifElseState: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 35


State 13

   58 whileLoop: WHILE . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

    L_PAREN  shift, and go to state 36


State 14

   31 write: WRITE . INPUT statement SEMICOLON

    INPUT  shift, and go to state 37


State 15

   50 return: RETURN . NUMBER SEMICOLON
   51       | RETURN . IDENT SEMICOLON
   52       | RETURN . statements

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 39
    IDENT    shift, and go to state 40

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 16 (statements)
    MOD        [reduce using rule 19 (statement)]
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 16 (statements)
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 16 (statements)
    PLUS       [reduce using rule 19 (statement)]
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 16 (statements)
    MINUS      [reduce using rule 19 (statement)]
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 16 (statements)
    MULT       [reduce using rule 19 (statement)]
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 16 (statements)
    DIV        [reduce using rule 19 (statement)]
    DIV        [reduce using rule 55 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 20
    statements    go to state 41
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 16

   15 variable: NUMBER .

    $default  reduce using rule 15 (variable)


State 17

   12 parameter: IDENT .
   14 variable: IDENT .
   45 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   59 assignment: IDENT . ASSIGN variable SEMICOLON
   60           | IDENT . ASSIGN arrayUnzip SEMICOLON
   61           | IDENT . ASSIGN statement SEMICOLON

    ASSIGN  shift, and go to state 42

    COMMA     reduce using rule 12 (parameter)
    COMMA     [reduce using rule 14 (variable)]
    R_PAREN   reduce using rule 12 (parameter)
    R_PAREN   [reduce using rule 14 (variable)]
    $default  reduce using rule 14 (variable)


State 18

    3 functions: functionstart L_PAREN parameters . R_PAREN BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters . R_PAREN BEGIN_BODY statements functionend functions

    R_PAREN  shift, and go to state 43


State 19

    8 parameters: parameter .
    9           | parameter . COMMA parameters

    COMMA  shift, and go to state 44

    $default  reduce using rule 8 (parameters)


State 20

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 45
    L_SQUARE_BRACKET  shift, and go to state 46
    PLUS              shift, and go to state 47
    MINUS             shift, and go to state 48
    MULT              shift, and go to state 49
    DIV               shift, and go to state 50

    MOD       [reduce using rule 28 (statement)]
    PLUS      [reduce using rule 28 (statement)]
    MINUS     [reduce using rule 28 (statement)]
    MULT      [reduce using rule 28 (statement)]
    DIV       [reduce using rule 28 (statement)]
    $default  reduce using rule 28 (statement)


State 21

   13 parameter: statements .

    $default  reduce using rule 13 (parameter)


State 22

   17 statements: statement . SEMICOLON
   18           | statement . statements
   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable

    INTEGER    shift, and go to state 38
    IF         shift, and go to state 11
    ELSE       shift, and go to state 12
    WHILE      shift, and go to state 13
    WRITE      shift, and go to state 14
    RETURN     shift, and go to state 15
    MOD        shift, and go to state 51
    SEMICOLON  shift, and go to state 52
    NUMBER     shift, and go to state 16
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    MULT       shift, and go to state 55
    DIV        shift, and go to state 56
    IDENT      shift, and go to state 57

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        [reduce using rule 16 (statements)]
    MOD        [reduce using rule 19 (statement)]
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  [reduce using rule 16 (statements)]
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       [reduce using rule 16 (statements)]
    PLUS       [reduce using rule 19 (statement)]
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      [reduce using rule 16 (statements)]
    MINUS      [reduce using rule 19 (statement)]
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       [reduce using rule 16 (statements)]
    MULT       [reduce using rule 19 (statement)]
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        [reduce using rule 16 (statements)]
    DIV        [reduce using rule 19 (statement)]
    DIV        [reduce using rule 55 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 20
    statements    go to state 58
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 23

   27 statement: write .

    $default  reduce using rule 27 (statement)


State 24

   26 statement: math .

    $default  reduce using rule 26 (statement)


State 25

   29 statement: arrayAccess .

    $default  reduce using rule 29 (statement)


State 26

   30 statement: arrayUnzip .

    $default  reduce using rule 30 (statement)


State 27

   25 statement: functionCall .

    $default  reduce using rule 25 (statement)


State 28

   24 statement: return .

    $default  reduce using rule 24 (statement)


State 29

   23 statement: definition .

    $default  reduce using rule 23 (statement)


State 30

   20 statement: ifElseState .

    $default  reduce using rule 20 (statement)


State 31

   21 statement: whileLoop .

    $default  reduce using rule 21 (statement)


State 32

   22 statement: assignment .

    $default  reduce using rule 22 (statement)


State 33

   11 parameter: INTEGER IDENT .
   53 definition: INTEGER IDENT . SEMICOLON
   54           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 59
    L_SQUARE_BRACKET  shift, and go to state 60

    $default  reduce using rule 11 (parameter)


State 34

   56 ifElseState: IF L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    IDENT  shift, and go to state 61

    $default  reduce using rule 62 (condition)

    condition  go to state 62


State 35

   57 ifElseState: ELSE BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 20
    statements    go to state 63
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 36

   58 whileLoop: WHILE L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 61

    $default  reduce using rule 62 (condition)

    condition  go to state 64


State 37

   31 write: WRITE INPUT . statement SEMICOLON

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 20
    statement     go to state 65
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 38

   53 definition: INTEGER . IDENT SEMICOLON
   54           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 66


State 39

   15 variable: NUMBER .
   50 return: RETURN NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 67

    SEMICOLON  [reduce using rule 15 (variable)]
    $default   reduce using rule 15 (variable)


State 40

   14 variable: IDENT .
   45 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   51 return: RETURN IDENT . SEMICOLON
   59 assignment: IDENT . ASSIGN variable SEMICOLON
   60           | IDENT . ASSIGN arrayUnzip SEMICOLON
   61           | IDENT . ASSIGN statement SEMICOLON

    SEMICOLON  shift, and go to state 68
    ASSIGN     shift, and go to state 42

    SEMICOLON  [reduce using rule 14 (variable)]
    $default   reduce using rule 14 (variable)


State 41

   52 return: RETURN statements .

    $default  reduce using rule 52 (return)


State 42

   45 functionCall: IDENT ASSIGN . IDENT L_PAREN arguments R_PAREN SEMICOLON
   59 assignment: IDENT ASSIGN . variable SEMICOLON
   60           | IDENT ASSIGN . arrayUnzip SEMICOLON
   61           | IDENT ASSIGN . statement SEMICOLON

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 69

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 70
    statement     go to state 71
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 72
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 43

    3 functions: functionstart L_PAREN parameters R_PAREN . BEGIN_BODY statements functionend
    4          | functionstart L_PAREN parameters R_PAREN . BEGIN_BODY statements functionend functions

    BEGIN_BODY  shift, and go to state 73


State 44

    9 parameters: parameter COMMA . parameters

    INTEGER  shift, and go to state 10
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 17

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    COMMA      reduce using rule 10 (parameter)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    R_PAREN    reduce using rule 10 (parameter)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    parameters    go to state 74
    parameter     go to state 19
    variable      go to state 20
    statements    go to state 21
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 45

   36 math: variable MOD . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 76


State 46

   42 arrayAccess: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 77


State 47

   33 math: variable PLUS . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 78


State 48

   32 math: variable MINUS . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 79


State 49

   34 math: variable MULT . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 80


State 50

   35 math: variable DIV . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 81


State 51

   41 math: statement MOD . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 82


State 52

   17 statements: statement SEMICOLON .

    $default  reduce using rule 17 (statements)


State 53

   38 math: statement PLUS . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 83


State 54

   37 math: statement MINUS . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 84


State 55

   39 math: statement MULT . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 85


State 56

   40 math: statement DIV . variable

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 86


State 57

   14 variable: IDENT .
   45 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   59 assignment: IDENT . ASSIGN variable SEMICOLON
   60           | IDENT . ASSIGN arrayUnzip SEMICOLON
   61           | IDENT . ASSIGN statement SEMICOLON

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 14 (variable)


State 58

   18 statements: statement statements .

    $default  reduce using rule 18 (statements)


State 59

   53 definition: INTEGER IDENT SEMICOLON .

    $default  reduce using rule 53 (definition)


State 60

   54 definition: INTEGER IDENT L_SQUARE_BRACKET . variable R_SQUARE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 16
    IDENT   shift, and go to state 75

    variable  go to state 87


State 61

   63 condition: IDENT . EQ IDENT
   64          | IDENT . NEQ IDENT
   65          | IDENT . LT IDENT
   66          | IDENT . GT IDENT
   67          | IDENT . LTE IDENT
   68          | IDENT . GTE IDENT
   69          | IDENT . EQ NUMBER
   70          | IDENT . NEQ NUMBER
   71          | IDENT . LT NUMBER
   72          | IDENT . GT NUMBER
   73          | IDENT . LTE NUMBER
   74          | IDENT . GTE NUMBER

    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    LT   shift, and go to state 90
    GT   shift, and go to state 91
    LTE  shift, and go to state 92
    GTE  shift, and go to state 93


State 62

   56 ifElseState: IF L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY ifElseState

    R_PAREN  shift, and go to state 94


State 63

   57 ifElseState: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 95


State 64

   58 whileLoop: WHILE L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY

    R_PAREN  shift, and go to state 96


State 65

   31 write: WRITE INPUT statement . SEMICOLON
   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable

    MOD        shift, and go to state 51
    SEMICOLON  shift, and go to state 97
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    MULT       shift, and go to state 55
    DIV        shift, and go to state 56


State 66

   53 definition: INTEGER IDENT . SEMICOLON
   54           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 59
    L_SQUARE_BRACKET  shift, and go to state 60


State 67

   50 return: RETURN NUMBER SEMICOLON .

    $default  reduce using rule 50 (return)


State 68

   51 return: RETURN IDENT SEMICOLON .

    $default  reduce using rule 51 (return)


State 69

   14 variable: IDENT .
   45 functionCall: IDENT . ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON
   45             | IDENT ASSIGN IDENT . L_PAREN arguments R_PAREN SEMICOLON
   59 assignment: IDENT . ASSIGN variable SEMICOLON
   60           | IDENT . ASSIGN arrayUnzip SEMICOLON
   61           | IDENT . ASSIGN statement SEMICOLON

    L_PAREN  shift, and go to state 98
    ASSIGN   shift, and go to state 42

    $default  reduce using rule 14 (variable)


State 70

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET
   59 assignment: IDENT ASSIGN variable . SEMICOLON

    MOD               shift, and go to state 45
    SEMICOLON         shift, and go to state 99
    L_SQUARE_BRACKET  shift, and go to state 46
    PLUS              shift, and go to state 47
    MINUS             shift, and go to state 48
    MULT              shift, and go to state 49
    DIV               shift, and go to state 50

    MOD        [reduce using rule 28 (statement)]
    SEMICOLON  [reduce using rule 28 (statement)]
    PLUS       [reduce using rule 28 (statement)]
    MINUS      [reduce using rule 28 (statement)]
    MULT       [reduce using rule 28 (statement)]
    DIV        [reduce using rule 28 (statement)]


State 71

   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable
   61 assignment: IDENT ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 51
    SEMICOLON  shift, and go to state 100
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    MULT       shift, and go to state 55
    DIV        shift, and go to state 56


State 72

   30 statement: arrayUnzip .
   60 assignment: IDENT ASSIGN arrayUnzip . SEMICOLON

    SEMICOLON  shift, and go to state 101

    SEMICOLON  [reduce using rule 30 (statement)]
    $default   reduce using rule 30 (statement)


State 73

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY . statements functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY . statements functionend functions

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 20
    statements    go to state 102
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 74

    9 parameters: parameter COMMA parameters .

    $default  reduce using rule 9 (parameters)


State 75

   14 variable: IDENT .

    $default  reduce using rule 14 (variable)


State 76

   36 math: variable MOD variable .

    $default  reduce using rule 36 (math)


State 77

   42 arrayAccess: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 103


State 78

   33 math: variable PLUS variable .

    $default  reduce using rule 33 (math)


State 79

   32 math: variable MINUS variable .

    $default  reduce using rule 32 (math)


State 80

   34 math: variable MULT variable .

    $default  reduce using rule 34 (math)


State 81

   35 math: variable DIV variable .

    $default  reduce using rule 35 (math)


State 82

   41 math: statement MOD variable .

    $default  reduce using rule 41 (math)


State 83

   38 math: statement PLUS variable .

    $default  reduce using rule 38 (math)


State 84

   37 math: statement MINUS variable .

    $default  reduce using rule 37 (math)


State 85

   39 math: statement MULT variable .

    $default  reduce using rule 39 (math)


State 86

   40 math: statement DIV variable .

    $default  reduce using rule 40 (math)


State 87

   54 definition: INTEGER IDENT L_SQUARE_BRACKET variable . R_SQUARE_BRACKET SEMICOLON

    R_SQUARE_BRACKET  shift, and go to state 104


State 88

   63 condition: IDENT EQ . IDENT
   69          | IDENT EQ . NUMBER

    NUMBER  shift, and go to state 105
    IDENT   shift, and go to state 106


State 89

   64 condition: IDENT NEQ . IDENT
   70          | IDENT NEQ . NUMBER

    NUMBER  shift, and go to state 107
    IDENT   shift, and go to state 108


State 90

   65 condition: IDENT LT . IDENT
   71          | IDENT LT . NUMBER

    NUMBER  shift, and go to state 109
    IDENT   shift, and go to state 110


State 91

   66 condition: IDENT GT . IDENT
   72          | IDENT GT . NUMBER

    NUMBER  shift, and go to state 111
    IDENT   shift, and go to state 112


State 92

   67 condition: IDENT LTE . IDENT
   73          | IDENT LTE . NUMBER

    NUMBER  shift, and go to state 113
    IDENT   shift, and go to state 114


State 93

   68 condition: IDENT GTE . IDENT
   74          | IDENT GTE . NUMBER

    NUMBER  shift, and go to state 115
    IDENT   shift, and go to state 116


State 94

   56 ifElseState: IF L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY ifElseState

    BEGIN_BODY  shift, and go to state 117


State 95

   57 ifElseState: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 57 (ifElseState)


State 96

   58 whileLoop: WHILE L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 118


State 97

   31 write: WRITE INPUT statement SEMICOLON .

    $default  reduce using rule 31 (write)


State 98

   45 functionCall: IDENT ASSIGN IDENT L_PAREN . arguments R_PAREN SEMICOLON

    NUMBER  shift, and go to state 119
    IDENT   shift, and go to state 120

    arguments  go to state 121
    argument   go to state 122


State 99

   59 assignment: IDENT ASSIGN variable SEMICOLON .

    $default  reduce using rule 59 (assignment)


State 100

   61 assignment: IDENT ASSIGN statement SEMICOLON .

    $default  reduce using rule 61 (assignment)


State 101

   60 assignment: IDENT ASSIGN arrayUnzip SEMICOLON .

    $default  reduce using rule 60 (assignment)


State 102

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements . functionend
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements . functionend functions

    END_BODY  shift, and go to state 123

    functionend  go to state 124


State 103

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET .

    ASSIGN  shift, and go to state 125

    $default  reduce using rule 44 (arrayUnzip)


State 104

   54 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 126


State 105

   69 condition: IDENT EQ NUMBER .

    $default  reduce using rule 69 (condition)


State 106

   63 condition: IDENT EQ IDENT .

    $default  reduce using rule 63 (condition)


State 107

   70 condition: IDENT NEQ NUMBER .

    $default  reduce using rule 70 (condition)


State 108

   64 condition: IDENT NEQ IDENT .

    $default  reduce using rule 64 (condition)


State 109

   71 condition: IDENT LT NUMBER .

    $default  reduce using rule 71 (condition)


State 110

   65 condition: IDENT LT IDENT .

    $default  reduce using rule 65 (condition)


State 111

   72 condition: IDENT GT NUMBER .

    $default  reduce using rule 72 (condition)


State 112

   66 condition: IDENT GT IDENT .

    $default  reduce using rule 66 (condition)


State 113

   73 condition: IDENT LTE NUMBER .

    $default  reduce using rule 73 (condition)


State 114

   67 condition: IDENT LTE IDENT .

    $default  reduce using rule 67 (condition)


State 115

   74 condition: IDENT GTE NUMBER .

    $default  reduce using rule 74 (condition)


State 116

   68 condition: IDENT GTE IDENT .

    $default  reduce using rule 68 (condition)


State 117

   56 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY ifElseState

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 20
    statements    go to state 127
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 118

   58 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 55 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 55 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 55 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 55 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 55 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 55 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 55 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 20
    statements    go to state 128
    statement     go to state 22
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 119

   49 argument: NUMBER .

    $default  reduce using rule 49 (argument)


State 120

   48 argument: IDENT .

    $default  reduce using rule 48 (argument)


State 121

   45 functionCall: IDENT ASSIGN IDENT L_PAREN arguments . R_PAREN SEMICOLON

    R_PAREN  shift, and go to state 129


State 122

   46 arguments: argument .
   47          | argument . COMMA arguments

    COMMA  shift, and go to state 130

    $default  reduce using rule 46 (arguments)


State 123

    7 functionend: END_BODY .

    $default  reduce using rule 7 (functionend)


State 124

    3 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend .
    4          | functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend . functions

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 3 (functions)

    functions      go to state 131
    functionstart  go to state 5


State 125

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . variable SEMICOLON

    INTEGER  shift, and go to state 38
    IF       shift, and go to state 11
    ELSE     shift, and go to state 12
    WHILE    shift, and go to state 13
    WRITE    shift, and go to state 14
    RETURN   shift, and go to state 15
    NUMBER   shift, and go to state 16
    IDENT    shift, and go to state 57

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 55 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 55 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 55 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 55 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 55 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 55 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 132
    statement     go to state 133
    write         go to state 23
    math          go to state 24
    arrayAccess   go to state 25
    arrayUnzip    go to state 26
    functionCall  go to state 27
    return        go to state 28
    definition    go to state 29
    ifElseState   go to state 30
    whileLoop     go to state 31
    assignment    go to state 32


State 126

   54 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON .

    $default  reduce using rule 54 (definition)


State 127

   56 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY ifElseState

    END_BODY  shift, and go to state 134


State 128

   58 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 135


State 129

   45 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 136


State 130

   47 arguments: argument COMMA . arguments

    NUMBER  shift, and go to state 119
    IDENT   shift, and go to state 120

    arguments  go to state 137
    argument   go to state 122


State 131

    4 functions: functionstart L_PAREN parameters R_PAREN BEGIN_BODY statements functionend functions .

    $default  reduce using rule 4 (functions)


State 132

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable . SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 45
    SEMICOLON         shift, and go to state 138
    L_SQUARE_BRACKET  shift, and go to state 46
    PLUS              shift, and go to state 47
    MINUS             shift, and go to state 48
    MULT              shift, and go to state 49
    DIV               shift, and go to state 50

    MOD        [reduce using rule 28 (statement)]
    SEMICOLON  [reduce using rule 28 (statement)]
    PLUS       [reduce using rule 28 (statement)]
    MINUS      [reduce using rule 28 (statement)]
    MULT       [reduce using rule 28 (statement)]
    DIV        [reduce using rule 28 (statement)]


State 133

   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable
   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 51
    SEMICOLON  shift, and go to state 139
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    MULT       shift, and go to state 55
    DIV        shift, and go to state 56


State 134

   56 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY . ifElseState

    IF    shift, and go to state 11
    ELSE  shift, and go to state 12

    IF        [reduce using rule 55 (ifElseState)]
    ELSE      [reduce using rule 55 (ifElseState)]
    $default  reduce using rule 55 (ifElseState)

    ifElseState  go to state 140


State 135

   58 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY .

    $default  reduce using rule 58 (whileLoop)


State 136

   45 functionCall: IDENT ASSIGN IDENT L_PAREN arguments R_PAREN SEMICOLON .

    $default  reduce using rule 45 (functionCall)


State 137

   47 arguments: argument COMMA arguments .

    $default  reduce using rule 47 (arguments)


State 138

   43 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON .

    $default  reduce using rule 43 (arrayAccess)


State 139

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON .

    $default  reduce using rule 42 (arrayAccess)


State 140

   56 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState .

    $default  reduce using rule 56 (ifElseState)
