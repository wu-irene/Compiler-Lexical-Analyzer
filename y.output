Terminals unused in grammar

   ARRAY
   OF
   THEN
   ENDIF
   DO
   CONTINUE
   BREAK
   READ
   NOT
   TRUE
   FALSE
   COLON
   EQUAL
   OUTPUT
   VOID


State 5 conflicts: 8 shift/reduce, 15 reduce/reduce
State 14 conflicts: 8 shift/reduce, 17 reduce/reduce
State 17 conflicts: 5 shift/reduce
State 19 conflicts: 14 shift/reduce, 17 reduce/reduce
State 30 conflicts: 8 shift/reduce, 16 reduce/reduce
State 31 conflicts: 8 shift/reduce, 16 reduce/reduce
State 34 conflicts: 8 shift/reduce, 15 reduce/reduce
State 36 conflicts: 6 reduce/reduce
State 37 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 40 conflicts: 8 shift/reduce, 16 reduce/reduce
State 41 conflicts: 6 reduce/reduce
State 58 conflicts: 2 reduce/reduce
State 73 conflicts: 6 shift/reduce
State 75 conflicts: 1 shift/reduce
State 91 conflicts: 8 shift/reduce, 16 reduce/reduce
State 125 conflicts: 8 shift/reduce, 15 reduce/reduce
State 126 conflicts: 8 shift/reduce, 15 reduce/reduce
State 128 conflicts: 6 reduce/reduce
State 132 conflicts: 6 shift/reduce
State 134 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: functionstart statements functionend
    4          | functionstart statements functionend functions

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY
    6              | FUNCTION IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    7 functionend: END_BODY

    8 arguments: argument
    9          | argument COMMA arguments

   10 argument: %empty
   11         | INTEGER IDENT
   12         | IDENT
   13         | statements

   14 variable: IDENT
   15         | NUMBER

   16 statements: %empty
   17           | statement SEMICOLON
   18           | statement statements

   19 statement: %empty
   20          | ifElseState
   21          | whileLoop
   22          | assignment
   23          | definition
   24          | return
   25          | functionCall
   26          | math
   27          | write
   28          | variable
   29          | arrayAccess
   30          | arrayUnzip

   31 write: WRITE INPUT statement SEMICOLON

   32 math: variable MINUS variable
   33     | variable PLUS variable
   34     | variable MULT variable
   35     | variable DIV variable
   36     | variable MOD variable
   37     | statement MINUS variable
   38     | statement PLUS variable
   39     | statement MULT variable
   40     | statement DIV variable
   41     | statement MOD variable

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON

   44 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET

   45 functionCall: IDENT L_PAREN arguments R_PAREN SEMICOLON

   46 return: RETURN NUMBER SEMICOLON
   47       | RETURN IDENT SEMICOLON
   48       | RETURN statements

   49 definition: INTEGER IDENT SEMICOLON
   50           | INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

   51 ifElseState: %empty
   52            | IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState
   53            | ELSE BEGIN_BODY statements END_BODY

   54 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

   55 assignment: IDENT ASSIGN variable SEMICOLON
   56           | IDENT ASSIGN arrayUnzip SEMICOLON
   57           | IDENT ASSIGN statement SEMICOLON

   58 condition: %empty
   59          | IDENT EQ IDENT
   60          | IDENT NEQ IDENT
   61          | IDENT LT IDENT
   62          | IDENT GT IDENT
   63          | IDENT LTE IDENT
   64          | IDENT GTE IDENT
   65          | IDENT EQ NUMBER
   66          | IDENT NEQ NUMBER
   67          | IDENT LT NUMBER
   68          | IDENT GT NUMBER
   69          | IDENT LTE NUMBER
   70          | IDENT GTE NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 11 49 50
FUNCTION (259) 6
BEGIN_BODY (260) 5 6 52 53 54
END_BODY (261) 7 52 53 54
ARRAY (262)
OF (263)
IF (264) 52
THEN (265)
ENDIF (266)
ELSE (267) 53
WHILE (268) 54
DO (269)
CONTINUE (270)
BREAK (271)
READ (272)
WRITE (273) 31
NOT (274)
TRUE (275)
FALSE (276)
RETURN (277) 46 47 48
MOD (278) 36 41
EQ (279) 59 65
NEQ (280) 60 66
LT (281) 61 67
GT (282) 62 68
LTE (283) 63 69
GTE (284) 64 70
SEMICOLON (285) 17 31 42 43 45 46 47 49 50 55 56 57
COLON (286)
COMMA (287) 9
L_SQUARE_BRACKET (288) 42 43 44 50
R_SQUARE_BRACKET (289) 42 43 44 50
EQUAL (290)
NUMBER (291) 15 46 65 66 67 68 69 70
PLUS (292) 33 38
MINUS (293) 32 37
MULT (294) 34 39
DIV (295) 35 40
L_PAREN (296) 5 6 45 52 54
R_PAREN (297) 5 6 45 52 54
ASSIGN (298) 42 43 55 56 57
INPUT (299) 31
OUTPUT (300)
IDENT (301) 5 6 11 12 14 45 47 49 50 55 56 57 59 60 61 62 63 64 65
    66 67 68 69 70
VOID (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
prog_start (49)
    on left: 1 2, on right: 0
functions (50)
    on left: 3 4, on right: 2 4
functionstart (51)
    on left: 5 6, on right: 3 4
functionend (52)
    on left: 7, on right: 3 4
arguments (53)
    on left: 8 9, on right: 5 6 9 45
argument (54)
    on left: 10 11 12 13, on right: 8 9
variable (55)
    on left: 14 15, on right: 28 32 33 34 35 36 37 38 39 40 41 42 43
    44 50 55
statements (56)
    on left: 16 17 18, on right: 3 4 13 18 48 52 53 54
statement (57)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30, on right: 17 18 31
    37 38 39 40 41 42 57
write (58)
    on left: 31, on right: 27
math (59)
    on left: 32 33 34 35 36 37 38 39 40 41, on right: 26
arrayAccess (60)
    on left: 42 43, on right: 29
arrayUnzip (61)
    on left: 44, on right: 30 56
functionCall (62)
    on left: 45, on right: 25
return (63)
    on left: 46 47 48, on right: 24
definition (64)
    on left: 49 50, on right: 23
ifElseState (65)
    on left: 51 52 53, on right: 20 52
whileLoop (66)
    on left: 54, on right: 21
assignment (67)
    on left: 55 56 57, on right: 22
condition (68)
    on left: 58 59 60 61 62 63 64 65 66 67 68 69 70, on right: 52 54


State 0

    0 $accept: . prog_start $end

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 1 (prog_start)

    prog_start     go to state 3
    functions      go to state 4
    functionstart  go to state 5


State 1

    5 functionstart: INTEGER . IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 6


State 2

    6 functionstart: FUNCTION . IDENT L_PAREN arguments R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 7


State 3

    0 $accept: prog_start . $end

    $end  shift, and go to state 8


State 4

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 5

    3 functions: functionstart . statements functionend
    4          | functionstart . statements functionend functions

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 17
    statements    go to state 18
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 6

    5 functionstart: INTEGER IDENT . L_PAREN arguments R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 30


State 7

    6 functionstart: FUNCTION IDENT . L_PAREN arguments R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 31


State 8

    0 $accept: prog_start $end .

    $default  accept


State 9

   49 definition: INTEGER . IDENT SEMICOLON
   50           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 32


State 10

   52 ifElseState: IF . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    L_PAREN  shift, and go to state 33


State 11

   53 ifElseState: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 34


State 12

   54 whileLoop: WHILE . L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY

    L_PAREN  shift, and go to state 35


State 13

   31 write: WRITE . INPUT statement SEMICOLON

    INPUT  shift, and go to state 36


State 14

   46 return: RETURN . NUMBER SEMICOLON
   47       | RETURN . IDENT SEMICOLON
   48       | RETURN . statements

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 37
    IDENT    shift, and go to state 38

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 16 (statements)
    MOD        [reduce using rule 19 (statement)]
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 16 (statements)
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 16 (statements)
    PLUS       [reduce using rule 19 (statement)]
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 16 (statements)
    MINUS      [reduce using rule 19 (statement)]
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 16 (statements)
    MULT       [reduce using rule 19 (statement)]
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 16 (statements)
    DIV        [reduce using rule 19 (statement)]
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 39
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 15

   15 variable: NUMBER .

    $default  reduce using rule 15 (variable)


State 16

   14 variable: IDENT .
   45 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   55 assignment: IDENT . ASSIGN variable SEMICOLON
   56           | IDENT . ASSIGN arrayUnzip SEMICOLON
   57           | IDENT . ASSIGN statement SEMICOLON

    L_PAREN  shift, and go to state 40
    ASSIGN   shift, and go to state 41

    $default  reduce using rule 14 (variable)


State 17

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 42
    L_SQUARE_BRACKET  shift, and go to state 43
    PLUS              shift, and go to state 44
    MINUS             shift, and go to state 45
    MULT              shift, and go to state 46
    DIV               shift, and go to state 47

    MOD       [reduce using rule 28 (statement)]
    PLUS      [reduce using rule 28 (statement)]
    MINUS     [reduce using rule 28 (statement)]
    MULT      [reduce using rule 28 (statement)]
    DIV       [reduce using rule 28 (statement)]
    $default  reduce using rule 28 (statement)


State 18

    3 functions: functionstart statements . functionend
    4          | functionstart statements . functionend functions

    END_BODY  shift, and go to state 48

    functionend  go to state 49


State 19

   17 statements: statement . SEMICOLON
   18           | statement . statements
   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable

    INTEGER    shift, and go to state 9
    IF         shift, and go to state 10
    ELSE       shift, and go to state 11
    WHILE      shift, and go to state 12
    WRITE      shift, and go to state 13
    RETURN     shift, and go to state 14
    MOD        shift, and go to state 50
    SEMICOLON  shift, and go to state 51
    NUMBER     shift, and go to state 15
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULT       shift, and go to state 54
    DIV        shift, and go to state 55
    IDENT      shift, and go to state 16

    INTEGER    [reduce using rule 16 (statements)]
    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 16 (statements)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 16 (statements)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 16 (statements)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 16 (statements)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 16 (statements)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        [reduce using rule 16 (statements)]
    MOD        [reduce using rule 19 (statement)]
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  [reduce using rule 16 (statements)]
    SEMICOLON  [reduce using rule 19 (statement)]
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 16 (statements)
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 16 (statements)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       [reduce using rule 16 (statements)]
    PLUS       [reduce using rule 19 (statement)]
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      [reduce using rule 16 (statements)]
    MINUS      [reduce using rule 19 (statement)]
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       [reduce using rule 16 (statements)]
    MULT       [reduce using rule 19 (statement)]
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        [reduce using rule 16 (statements)]
    DIV        [reduce using rule 19 (statement)]
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 16 (statements)
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 16 (statements)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 16 (statements)

    variable      go to state 17
    statements    go to state 56
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 20

   27 statement: write .

    $default  reduce using rule 27 (statement)


State 21

   26 statement: math .

    $default  reduce using rule 26 (statement)


State 22

   29 statement: arrayAccess .

    $default  reduce using rule 29 (statement)


State 23

   30 statement: arrayUnzip .

    $default  reduce using rule 30 (statement)


State 24

   25 statement: functionCall .

    $default  reduce using rule 25 (statement)


State 25

   24 statement: return .

    $default  reduce using rule 24 (statement)


State 26

   23 statement: definition .

    $default  reduce using rule 23 (statement)


State 27

   20 statement: ifElseState .

    $default  reduce using rule 20 (statement)


State 28

   21 statement: whileLoop .

    $default  reduce using rule 21 (statement)


State 29

   22 statement: assignment .

    $default  reduce using rule 22 (statement)


State 30

    5 functionstart: INTEGER IDENT L_PAREN . arguments R_PAREN BEGIN_BODY

    INTEGER  shift, and go to state 57
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 58

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    arguments     go to state 59
    argument      go to state 60
    variable      go to state 17
    statements    go to state 61
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 31

    6 functionstart: FUNCTION IDENT L_PAREN . arguments R_PAREN BEGIN_BODY

    INTEGER  shift, and go to state 57
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 58

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    arguments     go to state 62
    argument      go to state 60
    variable      go to state 17
    statements    go to state 61
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 32

   49 definition: INTEGER IDENT . SEMICOLON
   50           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 63
    L_SQUARE_BRACKET  shift, and go to state 64


State 33

   52 ifElseState: IF L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY ifElseState

    IDENT  shift, and go to state 65

    $default  reduce using rule 58 (condition)

    condition  go to state 66


State 34

   53 ifElseState: ELSE BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 17
    statements    go to state 67
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 35

   54 whileLoop: WHILE L_PAREN . condition R_PAREN BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 65

    $default  reduce using rule 58 (condition)

    condition  go to state 68


State 36

   31 write: WRITE INPUT . statement SEMICOLON

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 17
    statement     go to state 69
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 37

   15 variable: NUMBER .
   46 return: RETURN NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 70

    SEMICOLON  [reduce using rule 15 (variable)]
    $default   reduce using rule 15 (variable)


State 38

   14 variable: IDENT .
   45 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   47 return: RETURN IDENT . SEMICOLON
   55 assignment: IDENT . ASSIGN variable SEMICOLON
   56           | IDENT . ASSIGN arrayUnzip SEMICOLON
   57           | IDENT . ASSIGN statement SEMICOLON

    SEMICOLON  shift, and go to state 71
    L_PAREN    shift, and go to state 40
    ASSIGN     shift, and go to state 41

    SEMICOLON  [reduce using rule 14 (variable)]
    $default   reduce using rule 14 (variable)


State 39

   48 return: RETURN statements .

    $default  reduce using rule 48 (return)


State 40

   45 functionCall: IDENT L_PAREN . arguments R_PAREN SEMICOLON

    INTEGER  shift, and go to state 57
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 58

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    arguments     go to state 72
    argument      go to state 60
    variable      go to state 17
    statements    go to state 61
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 41

   55 assignment: IDENT ASSIGN . variable SEMICOLON
   56           | IDENT ASSIGN . arrayUnzip SEMICOLON
   57           | IDENT ASSIGN . statement SEMICOLON

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 73
    statement     go to state 74
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 75
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 42

   36 math: variable MOD . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 77


State 43

   42 arrayAccess: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET . variable R_SQUARE_BRACKET

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 78


State 44

   33 math: variable PLUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 79


State 45

   32 math: variable MINUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 80


State 46

   34 math: variable MULT . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 81


State 47

   35 math: variable DIV . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 82


State 48

    7 functionend: END_BODY .

    $default  reduce using rule 7 (functionend)


State 49

    3 functions: functionstart statements functionend .
    4          | functionstart statements functionend . functions

    INTEGER   shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 3 (functions)

    functions      go to state 83
    functionstart  go to state 5


State 50

   41 math: statement MOD . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 84


State 51

   17 statements: statement SEMICOLON .

    $default  reduce using rule 17 (statements)


State 52

   38 math: statement PLUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 85


State 53

   37 math: statement MINUS . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 86


State 54

   39 math: statement MULT . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 87


State 55

   40 math: statement DIV . variable

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 88


State 56

   18 statements: statement statements .

    $default  reduce using rule 18 (statements)


State 57

   11 argument: INTEGER . IDENT
   49 definition: INTEGER . IDENT SEMICOLON
   50           | INTEGER . IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    IDENT  shift, and go to state 89


State 58

   12 argument: IDENT .
   14 variable: IDENT .
   45 functionCall: IDENT . L_PAREN arguments R_PAREN SEMICOLON
   55 assignment: IDENT . ASSIGN variable SEMICOLON
   56           | IDENT . ASSIGN arrayUnzip SEMICOLON
   57           | IDENT . ASSIGN statement SEMICOLON

    L_PAREN  shift, and go to state 40
    ASSIGN   shift, and go to state 41

    COMMA     reduce using rule 12 (argument)
    COMMA     [reduce using rule 14 (variable)]
    R_PAREN   reduce using rule 12 (argument)
    R_PAREN   [reduce using rule 14 (variable)]
    $default  reduce using rule 14 (variable)


State 59

    5 functionstart: INTEGER IDENT L_PAREN arguments . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 90


State 60

    8 arguments: argument .
    9          | argument . COMMA arguments

    COMMA  shift, and go to state 91

    $default  reduce using rule 8 (arguments)


State 61

   13 argument: statements .

    $default  reduce using rule 13 (argument)


State 62

    6 functionstart: FUNCTION IDENT L_PAREN arguments . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 92


State 63

   49 definition: INTEGER IDENT SEMICOLON .

    $default  reduce using rule 49 (definition)


State 64

   50 definition: INTEGER IDENT L_SQUARE_BRACKET . variable R_SQUARE_BRACKET SEMICOLON

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 76

    variable  go to state 93


State 65

   59 condition: IDENT . EQ IDENT
   60          | IDENT . NEQ IDENT
   61          | IDENT . LT IDENT
   62          | IDENT . GT IDENT
   63          | IDENT . LTE IDENT
   64          | IDENT . GTE IDENT
   65          | IDENT . EQ NUMBER
   66          | IDENT . NEQ NUMBER
   67          | IDENT . LT NUMBER
   68          | IDENT . GT NUMBER
   69          | IDENT . LTE NUMBER
   70          | IDENT . GTE NUMBER

    EQ   shift, and go to state 94
    NEQ  shift, and go to state 95
    LT   shift, and go to state 96
    GT   shift, and go to state 97
    LTE  shift, and go to state 98
    GTE  shift, and go to state 99


State 66

   52 ifElseState: IF L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY ifElseState

    R_PAREN  shift, and go to state 100


State 67

   53 ifElseState: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 101


State 68

   54 whileLoop: WHILE L_PAREN condition . R_PAREN BEGIN_BODY statements END_BODY

    R_PAREN  shift, and go to state 102


State 69

   31 write: WRITE INPUT statement . SEMICOLON
   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable

    MOD        shift, and go to state 50
    SEMICOLON  shift, and go to state 103
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULT       shift, and go to state 54
    DIV        shift, and go to state 55


State 70

   46 return: RETURN NUMBER SEMICOLON .

    $default  reduce using rule 46 (return)


State 71

   47 return: RETURN IDENT SEMICOLON .

    $default  reduce using rule 47 (return)


State 72

   45 functionCall: IDENT L_PAREN arguments . R_PAREN SEMICOLON

    R_PAREN  shift, and go to state 104


State 73

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET
   55 assignment: IDENT ASSIGN variable . SEMICOLON

    MOD               shift, and go to state 42
    SEMICOLON         shift, and go to state 105
    L_SQUARE_BRACKET  shift, and go to state 43
    PLUS              shift, and go to state 44
    MINUS             shift, and go to state 45
    MULT              shift, and go to state 46
    DIV               shift, and go to state 47

    MOD        [reduce using rule 28 (statement)]
    SEMICOLON  [reduce using rule 28 (statement)]
    PLUS       [reduce using rule 28 (statement)]
    MINUS      [reduce using rule 28 (statement)]
    MULT       [reduce using rule 28 (statement)]
    DIV        [reduce using rule 28 (statement)]


State 74

   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable
   57 assignment: IDENT ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 50
    SEMICOLON  shift, and go to state 106
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULT       shift, and go to state 54
    DIV        shift, and go to state 55


State 75

   30 statement: arrayUnzip .
   56 assignment: IDENT ASSIGN arrayUnzip . SEMICOLON

    SEMICOLON  shift, and go to state 107

    SEMICOLON  [reduce using rule 30 (statement)]
    $default   reduce using rule 30 (statement)


State 76

   14 variable: IDENT .

    $default  reduce using rule 14 (variable)


State 77

   36 math: variable MOD variable .

    $default  reduce using rule 36 (math)


State 78

   42 arrayAccess: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET variable . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 108


State 79

   33 math: variable PLUS variable .

    $default  reduce using rule 33 (math)


State 80

   32 math: variable MINUS variable .

    $default  reduce using rule 32 (math)


State 81

   34 math: variable MULT variable .

    $default  reduce using rule 34 (math)


State 82

   35 math: variable DIV variable .

    $default  reduce using rule 35 (math)


State 83

    4 functions: functionstart statements functionend functions .

    $default  reduce using rule 4 (functions)


State 84

   41 math: statement MOD variable .

    $default  reduce using rule 41 (math)


State 85

   38 math: statement PLUS variable .

    $default  reduce using rule 38 (math)


State 86

   37 math: statement MINUS variable .

    $default  reduce using rule 37 (math)


State 87

   39 math: statement MULT variable .

    $default  reduce using rule 39 (math)


State 88

   40 math: statement DIV variable .

    $default  reduce using rule 40 (math)


State 89

   11 argument: INTEGER IDENT .
   49 definition: INTEGER IDENT . SEMICOLON
   50           | INTEGER IDENT . L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON

    SEMICOLON         shift, and go to state 63
    L_SQUARE_BRACKET  shift, and go to state 64

    $default  reduce using rule 11 (argument)


State 90

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 109


State 91

    9 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 57
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 58

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    COMMA      reduce using rule 10 (argument)
    COMMA      [reduce using rule 16 (statements)]
    COMMA      [reduce using rule 19 (statement)]
    COMMA      [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    R_PAREN    reduce using rule 10 (argument)
    R_PAREN    [reduce using rule 16 (statements)]
    R_PAREN    [reduce using rule 19 (statement)]
    R_PAREN    [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    arguments     go to state 110
    argument      go to state 60
    variable      go to state 17
    statements    go to state 61
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 92

    6 functionstart: FUNCTION IDENT L_PAREN arguments R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 111


State 93

   50 definition: INTEGER IDENT L_SQUARE_BRACKET variable . R_SQUARE_BRACKET SEMICOLON

    R_SQUARE_BRACKET  shift, and go to state 112


State 94

   59 condition: IDENT EQ . IDENT
   65          | IDENT EQ . NUMBER

    NUMBER  shift, and go to state 113
    IDENT   shift, and go to state 114


State 95

   60 condition: IDENT NEQ . IDENT
   66          | IDENT NEQ . NUMBER

    NUMBER  shift, and go to state 115
    IDENT   shift, and go to state 116


State 96

   61 condition: IDENT LT . IDENT
   67          | IDENT LT . NUMBER

    NUMBER  shift, and go to state 117
    IDENT   shift, and go to state 118


State 97

   62 condition: IDENT GT . IDENT
   68          | IDENT GT . NUMBER

    NUMBER  shift, and go to state 119
    IDENT   shift, and go to state 120


State 98

   63 condition: IDENT LTE . IDENT
   69          | IDENT LTE . NUMBER

    NUMBER  shift, and go to state 121
    IDENT   shift, and go to state 122


State 99

   64 condition: IDENT GTE . IDENT
   70          | IDENT GTE . NUMBER

    NUMBER  shift, and go to state 123
    IDENT   shift, and go to state 124


State 100

   52 ifElseState: IF L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY ifElseState

    BEGIN_BODY  shift, and go to state 125


State 101

   53 ifElseState: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 53 (ifElseState)


State 102

   54 whileLoop: WHILE L_PAREN condition R_PAREN . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 126


State 103

   31 write: WRITE INPUT statement SEMICOLON .

    $default  reduce using rule 31 (write)


State 104

   45 functionCall: IDENT L_PAREN arguments R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 127


State 105

   55 assignment: IDENT ASSIGN variable SEMICOLON .

    $default  reduce using rule 55 (assignment)


State 106

   57 assignment: IDENT ASSIGN statement SEMICOLON .

    $default  reduce using rule 57 (assignment)


State 107

   56 assignment: IDENT ASSIGN arrayUnzip SEMICOLON .

    $default  reduce using rule 56 (assignment)


State 108

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET . ASSIGN variable SEMICOLON
   44 arrayUnzip: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET .

    ASSIGN  shift, and go to state 128

    $default  reduce using rule 44 (arrayUnzip)


State 109

    5 functionstart: INTEGER IDENT L_PAREN arguments R_PAREN BEGIN_BODY .

    $default  reduce using rule 5 (functionstart)


State 110

    9 arguments: argument COMMA arguments .

    $default  reduce using rule 9 (arguments)


State 111

    6 functionstart: FUNCTION IDENT L_PAREN arguments R_PAREN BEGIN_BODY .

    $default  reduce using rule 6 (functionstart)


State 112

   50 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 129


State 113

   65 condition: IDENT EQ NUMBER .

    $default  reduce using rule 65 (condition)


State 114

   59 condition: IDENT EQ IDENT .

    $default  reduce using rule 59 (condition)


State 115

   66 condition: IDENT NEQ NUMBER .

    $default  reduce using rule 66 (condition)


State 116

   60 condition: IDENT NEQ IDENT .

    $default  reduce using rule 60 (condition)


State 117

   67 condition: IDENT LT NUMBER .

    $default  reduce using rule 67 (condition)


State 118

   61 condition: IDENT LT IDENT .

    $default  reduce using rule 61 (condition)


State 119

   68 condition: IDENT GT NUMBER .

    $default  reduce using rule 68 (condition)


State 120

   62 condition: IDENT GT IDENT .

    $default  reduce using rule 62 (condition)


State 121

   69 condition: IDENT LTE NUMBER .

    $default  reduce using rule 69 (condition)


State 122

   63 condition: IDENT LTE IDENT .

    $default  reduce using rule 63 (condition)


State 123

   70 condition: IDENT GTE NUMBER .

    $default  reduce using rule 70 (condition)


State 124

   64 condition: IDENT GTE IDENT .

    $default  reduce using rule 64 (condition)


State 125

   52 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY ifElseState

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 17
    statements    go to state 130
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 126

   54 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY . statements END_BODY

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    INTEGER    [reduce using rule 19 (statement)]
    INTEGER    [reduce using rule 51 (ifElseState)]
    END_BODY   reduce using rule 16 (statements)
    END_BODY   [reduce using rule 19 (statement)]
    END_BODY   [reduce using rule 51 (ifElseState)]
    IF         [reduce using rule 19 (statement)]
    IF         [reduce using rule 51 (ifElseState)]
    ELSE       [reduce using rule 19 (statement)]
    ELSE       [reduce using rule 51 (ifElseState)]
    WHILE      [reduce using rule 19 (statement)]
    WHILE      [reduce using rule 51 (ifElseState)]
    WRITE      [reduce using rule 19 (statement)]
    WRITE      [reduce using rule 51 (ifElseState)]
    RETURN     [reduce using rule 19 (statement)]
    RETURN     [reduce using rule 51 (ifElseState)]
    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    NUMBER     [reduce using rule 19 (statement)]
    NUMBER     [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    IDENT      [reduce using rule 19 (statement)]
    IDENT      [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 17
    statements    go to state 131
    statement     go to state 19
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 127

   45 functionCall: IDENT L_PAREN arguments R_PAREN SEMICOLON .

    $default  reduce using rule 45 (functionCall)


State 128

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . statement SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN . variable SEMICOLON

    INTEGER  shift, and go to state 9
    IF       shift, and go to state 10
    ELSE     shift, and go to state 11
    WHILE    shift, and go to state 12
    WRITE    shift, and go to state 13
    RETURN   shift, and go to state 14
    NUMBER   shift, and go to state 15
    IDENT    shift, and go to state 16

    MOD        reduce using rule 19 (statement)
    MOD        [reduce using rule 51 (ifElseState)]
    SEMICOLON  reduce using rule 19 (statement)
    SEMICOLON  [reduce using rule 51 (ifElseState)]
    PLUS       reduce using rule 19 (statement)
    PLUS       [reduce using rule 51 (ifElseState)]
    MINUS      reduce using rule 19 (statement)
    MINUS      [reduce using rule 51 (ifElseState)]
    MULT       reduce using rule 19 (statement)
    MULT       [reduce using rule 51 (ifElseState)]
    DIV        reduce using rule 19 (statement)
    DIV        [reduce using rule 51 (ifElseState)]
    $default   reduce using rule 19 (statement)

    variable      go to state 132
    statement     go to state 133
    write         go to state 20
    math          go to state 21
    arrayAccess   go to state 22
    arrayUnzip    go to state 23
    functionCall  go to state 24
    return        go to state 25
    definition    go to state 26
    ifElseState   go to state 27
    whileLoop     go to state 28
    assignment    go to state 29


State 129

   50 definition: INTEGER IDENT L_SQUARE_BRACKET variable R_SQUARE_BRACKET SEMICOLON .

    $default  reduce using rule 50 (definition)


State 130

   52 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY ifElseState

    END_BODY  shift, and go to state 134


State 131

   54 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 135


State 132

   28 statement: variable .
   32 math: variable . MINUS variable
   33     | variable . PLUS variable
   34     | variable . MULT variable
   35     | variable . DIV variable
   36     | variable . MOD variable
   42 arrayAccess: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON
   43            | variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON
   43            | variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable . SEMICOLON
   44 arrayUnzip: variable . L_SQUARE_BRACKET variable R_SQUARE_BRACKET

    MOD               shift, and go to state 42
    SEMICOLON         shift, and go to state 136
    L_SQUARE_BRACKET  shift, and go to state 43
    PLUS              shift, and go to state 44
    MINUS             shift, and go to state 45
    MULT              shift, and go to state 46
    DIV               shift, and go to state 47

    MOD        [reduce using rule 28 (statement)]
    SEMICOLON  [reduce using rule 28 (statement)]
    PLUS       [reduce using rule 28 (statement)]
    MINUS      [reduce using rule 28 (statement)]
    MULT       [reduce using rule 28 (statement)]
    DIV        [reduce using rule 28 (statement)]


State 133

   37 math: statement . MINUS variable
   38     | statement . PLUS variable
   39     | statement . MULT variable
   40     | statement . DIV variable
   41     | statement . MOD variable
   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement . SEMICOLON

    MOD        shift, and go to state 50
    SEMICOLON  shift, and go to state 137
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    MULT       shift, and go to state 54
    DIV        shift, and go to state 55


State 134

   52 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY . ifElseState

    IF    shift, and go to state 10
    ELSE  shift, and go to state 11

    IF        [reduce using rule 51 (ifElseState)]
    ELSE      [reduce using rule 51 (ifElseState)]
    $default  reduce using rule 51 (ifElseState)

    ifElseState  go to state 138


State 135

   54 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY .

    $default  reduce using rule 54 (whileLoop)


State 136

   43 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN variable SEMICOLON .

    $default  reduce using rule 43 (arrayAccess)


State 137

   42 arrayAccess: variable L_SQUARE_BRACKET variable R_SQUARE_BRACKET ASSIGN statement SEMICOLON .

    $default  reduce using rule 42 (arrayAccess)


State 138

   52 ifElseState: IF L_PAREN condition R_PAREN BEGIN_BODY statements END_BODY ifElseState .

    $default  reduce using rule 52 (ifElseState)
