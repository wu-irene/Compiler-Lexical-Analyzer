Terminals unused in grammar

   INTEGER
   FUNCTION
   END_BODY
   ARRAY
   OF
   THEN
   ENDIF
   ELSE
   DO
   CONTINUE
   BREAK
   READ
   WRITE
   NOT
   TRUE
   FALSE
   RETURN
   MOD
   NEQ
   COLON
   COMMA
   L_SQUARE_BRACKET
   R_SQUARE_BRACKET
   PLUS
   MINUS
   MULT
   DIV
   ASSIGN


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: statements

    4 statements: statement

    5 ident: IDENT

    6 statement: IfElse
    7          | whileLoop
    8          | assign

    9 IfElse: IF L_PAREN condition R_PAREN BEGIN_BODY

   10 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY

   11 assign: ident EQUAL IDENT SEMICOLON
   12       | ident EQUAL NUMBER SEMICOLON

   13 condition: %empty
   14          | ident LT NUMBER
   15          | ident GT NUMBER
   16          | ident LTE NUMBER
   17          | ident GTE NUMBER
   18          | ident EQ NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258)
FUNCTION (259)
BEGIN_BODY (260) 9 10
END_BODY (261)
ARRAY (262)
OF (263)
IF (264) 9
THEN (265)
ENDIF (266)
ELSE (267)
WHILE (268) 10
DO (269)
CONTINUE (270)
BREAK (271)
READ (272)
WRITE (273)
NOT (274)
TRUE (275)
FALSE (276)
RETURN (277)
MOD (278)
EQ (279) 18
NEQ (280)
LT (281) 14
GT (282) 15
LTE (283) 16
GTE (284) 17
SEMICOLON (285) 11 12
COLON (286)
COMMA (287)
L_SQUARE_BRACKET (288)
R_SQUARE_BRACKET (289)
EQUAL (290) 11 12
NUMBER (291) 12 14 15 16 17 18
PLUS (292)
MINUS (293)
MULT (294)
DIV (295)
L_PAREN (296) 9 10
R_PAREN (297) 9 10
ASSIGN (298)
IDENT (299) 5 11


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
prog_start (46)
    on left: 1 2, on right: 0
functions (47)
    on left: 3, on right: 2
statements (48)
    on left: 4, on right: 3
ident (49)
    on left: 5, on right: 11 12 14 15 16 17 18
statement (50)
    on left: 6 7 8, on right: 4
IfElse (51)
    on left: 9, on right: 6
whileLoop (52)
    on left: 10, on right: 7
assign (53)
    on left: 11 12, on right: 8
condition (54)
    on left: 13 14 15 16 17 18, on right: 9 10


State 0

    0 $accept: . prog_start $end

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    IDENT  shift, and go to state 3

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 4
    functions   go to state 5
    statements  go to state 6
    ident       go to state 7
    statement   go to state 8
    IfElse      go to state 9
    whileLoop   go to state 10
    assign      go to state 11


State 1

    9 IfElse: IF . L_PAREN condition R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 12


State 2

   10 whileLoop: WHILE . L_PAREN condition R_PAREN BEGIN_BODY

    L_PAREN  shift, and go to state 13


State 3

    5 ident: IDENT .

    $default  reduce using rule 5 (ident)


State 4

    0 $accept: prog_start . $end

    $end  shift, and go to state 14


State 5

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 6

    3 functions: statements .

    $default  reduce using rule 3 (functions)


State 7

   11 assign: ident . EQUAL IDENT SEMICOLON
   12       | ident . EQUAL NUMBER SEMICOLON

    EQUAL  shift, and go to state 15


State 8

    4 statements: statement .

    $default  reduce using rule 4 (statements)


State 9

    6 statement: IfElse .

    $default  reduce using rule 6 (statement)


State 10

    7 statement: whileLoop .

    $default  reduce using rule 7 (statement)


State 11

    8 statement: assign .

    $default  reduce using rule 8 (statement)


State 12

    9 IfElse: IF L_PAREN . condition R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 3

    $default  reduce using rule 13 (condition)

    ident      go to state 16
    condition  go to state 17


State 13

   10 whileLoop: WHILE L_PAREN . condition R_PAREN BEGIN_BODY

    IDENT  shift, and go to state 3

    $default  reduce using rule 13 (condition)

    ident      go to state 16
    condition  go to state 18


State 14

    0 $accept: prog_start $end .

    $default  accept


State 15

   11 assign: ident EQUAL . IDENT SEMICOLON
   12       | ident EQUAL . NUMBER SEMICOLON

    NUMBER  shift, and go to state 19
    IDENT   shift, and go to state 20


State 16

   14 condition: ident . LT NUMBER
   15          | ident . GT NUMBER
   16          | ident . LTE NUMBER
   17          | ident . GTE NUMBER
   18          | ident . EQ NUMBER

    EQ   shift, and go to state 21
    LT   shift, and go to state 22
    GT   shift, and go to state 23
    LTE  shift, and go to state 24
    GTE  shift, and go to state 25


State 17

    9 IfElse: IF L_PAREN condition . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 26


State 18

   10 whileLoop: WHILE L_PAREN condition . R_PAREN BEGIN_BODY

    R_PAREN  shift, and go to state 27


State 19

   12 assign: ident EQUAL NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 20

   11 assign: ident EQUAL IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 29


State 21

   18 condition: ident EQ . NUMBER

    NUMBER  shift, and go to state 30


State 22

   14 condition: ident LT . NUMBER

    NUMBER  shift, and go to state 31


State 23

   15 condition: ident GT . NUMBER

    NUMBER  shift, and go to state 32


State 24

   16 condition: ident LTE . NUMBER

    NUMBER  shift, and go to state 33


State 25

   17 condition: ident GTE . NUMBER

    NUMBER  shift, and go to state 34


State 26

    9 IfElse: IF L_PAREN condition R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 35


State 27

   10 whileLoop: WHILE L_PAREN condition R_PAREN . BEGIN_BODY

    BEGIN_BODY  shift, and go to state 36


State 28

   12 assign: ident EQUAL NUMBER SEMICOLON .

    $default  reduce using rule 12 (assign)


State 29

   11 assign: ident EQUAL IDENT SEMICOLON .

    $default  reduce using rule 11 (assign)


State 30

   18 condition: ident EQ NUMBER .

    $default  reduce using rule 18 (condition)


State 31

   14 condition: ident LT NUMBER .

    $default  reduce using rule 14 (condition)


State 32

   15 condition: ident GT NUMBER .

    $default  reduce using rule 15 (condition)


State 33

   16 condition: ident LTE NUMBER .

    $default  reduce using rule 16 (condition)


State 34

   17 condition: ident GTE NUMBER .

    $default  reduce using rule 17 (condition)


State 35

    9 IfElse: IF L_PAREN condition R_PAREN BEGIN_BODY .

    $default  reduce using rule 9 (IfElse)


State 36

   10 whileLoop: WHILE L_PAREN condition R_PAREN BEGIN_BODY .

    $default  reduce using rule 10 (whileLoop)
